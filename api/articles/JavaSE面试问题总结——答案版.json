{"title":"JavaSE面试问题总结——答案版","uid":"531f170567168922331d8060bfe590e6","slug":"JavaSE面试问题总结——答案版","date":"2024-03-19T08:08:30.000Z","updated":"2024-03-20T13:02:52.495Z","comments":true,"path":"api/articles/JavaSE面试问题总结——答案版.json","keywords":null,"cover":null,"content":"<h1 id=\"1-面向对象\"><a href=\"#1-面向对象\" class=\"headerlink\" title=\"1. 面向对象\"></a>1. 面向对象</h1><h2 id=\"1-1-什么是面向对象编程？\"><a href=\"#1-1-什么是面向对象编程？\" class=\"headerlink\" title=\"1.1 什么是面向对象编程？\"></a>1.1 什么是面向对象编程？</h2><p>答：面向对象编程是一种程序设计思想，通过将问题抽象成对象，通过对象之间的交互和数据封装来实现程序逻辑。</p>\n<h2 id=\"1-2-Java中的类和对象有什么区别？\"><a href=\"#1-2-Java中的类和对象有什么区别？\" class=\"headerlink\" title=\"1.2 Java中的类和对象有什么区别？\"></a>1.2 Java中的类和对象有什么区别？</h2><p>答：类是描述对象的模板，对象是类的实例。类定义了对象的属性和行为，而对象则具体地拥有这些属性和行为。</p>\n<h2 id=\"1-3-什么是封装？为什么要使用封装？\"><a href=\"#1-3-什么是封装？为什么要使用封装？\" class=\"headerlink\" title=\"1.3 什么是封装？为什么要使用封装？\"></a>1.3 什么是封装？为什么要使用封装？</h2><p>答：封装是将数据和方法包装在类中，并限制对数据的直接访问。封装可以隐藏内部细节，提供对外部的安全接口，并实现代码的重用和维护。</p>\n<h2 id=\"1-4-什么是继承？有什么作用？\"><a href=\"#1-4-什么是继承？有什么作用？\" class=\"headerlink\" title=\"1.4 什么是继承？有什么作用？\"></a>1.4 什么是继承？有什么作用？</h2><p>答：继承是指子类继承父类的属性和方法。继承可以实现代码的重用，提高代码的可维护性和可扩展性。</p>\n<h2 id=\"1-5-Java是否支持多继承？\"><a href=\"#1-5-Java是否支持多继承？\" class=\"headerlink\" title=\"1.5 Java是否支持多继承？\"></a>1.5 Java是否支持多继承？</h2><p>答：Java不支持多继承，一个类只能继承一个父类。但是Java支持<strong>接口的多实现</strong>，实现了多继承的效果。</p>\n<h2 id=\"1-6-什么是多态？如何实现多态？\"><a href=\"#1-6-什么是多态？如何实现多态？\" class=\"headerlink\" title=\"1.6 什么是多态？如何实现多态？\"></a>1.6 什么是多态？如何实现多态？</h2><p>答：多态是同一类型的对象在不同情况下表现出不同的行为。多态可以通过继承和接口的方式实现。父 父 &#x3D; new 子</p>\n<h2 id=\"1-7-什么是抽象类？有什么作用？\"><a href=\"#1-7-什么是抽象类？有什么作用？\" class=\"headerlink\" title=\"1.7 什么是抽象类？有什么作用？\"></a>1.7 什么是抽象类？有什么作用？</h2><p>答：抽象类是不能被实例化的，它只能被继承。抽象类可以包含抽象方法和具体方法的定义，用于作为其他类的父类。</p>\n<h2 id=\"1-8-什么是接口？有什么作用？\"><a href=\"#1-8-什么是接口？有什么作用？\" class=\"headerlink\" title=\"1.8 什么是接口？有什么作用？\"></a>1.8 什么是接口？有什么作用？</h2><p>答：接口是一组抽象方法的集合。接口定义了对象应该具备的行为，类可以实现（implements）接口来达到多继承的效果。</p>\n<h2 id=\"1-9-Java中的构造方法有什么作用？\"><a href=\"#1-9-Java中的构造方法有什么作用？\" class=\"headerlink\" title=\"1.9 Java中的构造方法有什么作用？\"></a>1.9 Java中的构造方法有什么作用？</h2><p>答：构造方法是用于在创建对象时初始化对象的状态。它的名称与类名相同，没有返回类型。</p>\n<h2 id=\"1-10-什么是重载和重写？\"><a href=\"#1-10-什么是重载和重写？\" class=\"headerlink\" title=\"1.10 什么是重载和重写？\"></a>1.10 什么是重载和重写？</h2><p>答：重载发生在同一个类中，方法名相同、参数列表、返回类型、<strong>权限修饰符可以不同</strong>。重写发生在子类中，方法名相、参数列表、返回类型都相同，<strong>权限修饰符要大于父类方法，声明异常范围要小于父类方法</strong>，但是final和private修饰的方法不可重写。</p>\n<h2 id=\"1-11-什么是静态方法和静态变量？\"><a href=\"#1-11-什么是静态方法和静态变量？\" class=\"headerlink\" title=\"1.11 什么是静态方法和静态变量？\"></a>1.11 什么是静态方法和静态变量？</h2><p>答：静态方法和静态变量属于<strong>类级别</strong>，而不是对象级别。它们可以<strong>在类被加载时直接调用</strong>，无需创建对象。</p>\n<h2 id=\"1-12-Java中如何实现数据的隐藏和封装？\"><a href=\"#1-12-Java中如何实现数据的隐藏和封装？\" class=\"headerlink\" title=\"1.12 Java中如何实现数据的隐藏和封装？\"></a>1.12 Java中如何实现数据的隐藏和封装？</h2><p>答：Java中<strong>通过访问控制修饰符</strong>（private、protected、public）来限制对类的属性和方法的访问。</p>\n<h2 id=\"1-13-什么是内部类？有什么作用？\"><a href=\"#1-13-什么是内部类？有什么作用？\" class=\"headerlink\" title=\"1.13 什么是内部类？有什么作用？\"></a>1.13 什么是内部类？有什么作用？</h2><p>答：内部类是<strong>定义在其他类内部的类</strong>。它<strong>可以访问外部类的成员</strong>，并提供了更好的封装性和代码组织性。</p>\n<h2 id=\"1-14-什么是匿名类？\"><a href=\"#1-14-什么是匿名类？\" class=\"headerlink\" title=\"1.14 什么是匿名类？\"></a>1.14 什么是匿名类？</h2><p>答：匿名类是没有名字的内部类，它通常用于<strong>直接创建对象</strong>并<strong>重写父类或接口的方法</strong>。</p>\n<h2 id=\"1-15-什么是单继承和多实现？\"><a href=\"#1-15-什么是单继承和多实现？\" class=\"headerlink\" title=\"1.15 什么是单继承和多实现？\"></a>1.15 什么是单继承和多实现？</h2><p>答：Java中一个类只能继承一个父类，这称为单继承；但是一个类可以实现多个接口，称为多实现。</p>\n<h2 id=\"1-16-Java中如何防止继承？\"><a href=\"#1-16-Java中如何防止继承？\" class=\"headerlink\" title=\"1.16 Java中如何防止继承？\"></a>1.16 Java中如何防止继承？</h2><p>答：通过将类声明为final，可以防止其他类继承该类。</p>\n<h2 id=\"1-17-什么是对象的浅拷贝和深拷贝？\"><a href=\"#1-17-什么是对象的浅拷贝和深拷贝？\" class=\"headerlink\" title=\"1.17  什么是对象的浅拷贝和深拷贝？\"></a>1.17  什么是对象的浅拷贝和深拷贝？</h2><p>答：浅拷贝是指复制对象时，简单地<strong>复制对象的引用</strong>；深拷贝是指复制对象时，<strong>复制对象的所有引用和对象本身</strong>。</p>\n<h2 id=\"1-18-什么是重写equals-和hashCode-方法的作用？\"><a href=\"#1-18-什么是重写equals-和hashCode-方法的作用？\" class=\"headerlink\" title=\"1.18 什么是重写equals()和hashCode()方法的作用？\"></a>1.18 什么是重写equals()和hashCode()方法的作用？</h2><p>答：重写equals()方法可以<strong>定制对象之间的相等比较逻辑</strong>；重写hashCode()方法可以<strong>保证对象在哈希表中的正确存储和查找</strong>。</p>\n<h2 id=\"1-19-什么是枚举类？\"><a href=\"#1-19-什么是枚举类？\" class=\"headerlink\" title=\"1.19 什么是枚举类？\"></a>1.19 什么是枚举类？</h2><p>答：枚举类是一种特殊的类，它<strong>限制对象的个数</strong>，并提供了更好的类型安全和代码可读性。</p>\n<h2 id=\"1-20-super关键字和this关键字有何区别？\"><a href=\"#1-20-super关键字和this关键字有何区别？\" class=\"headerlink\" title=\"1.20 super关键字和this关键字有何区别？\"></a>1.20 super关键字和this关键字有何区别？</h2><p>答：super关键字用于访问父类的成员（属性和方法），this关键字用于访问当前对象的成员。 </p>\n<h2 id=\"1-21-接口和抽象类的区别？\"><a href=\"#1-21-接口和抽象类的区别？\" class=\"headerlink\" title=\"1.21 接口和抽象类的区别？\"></a>1.21 接口和抽象类的区别？</h2><p>（1）抽象类可以有构造方法，而接口没有；</p>\n<p>（2）抽象类可以有抽象方法和具体方法，接口只能有抽象方法；</p>\n<p>（3）抽象类的成员4种权限修饰符都可以修饰，接口只能用private。</p>\n<h1 id=\"2-异常\"><a href=\"#2-异常\" class=\"headerlink\" title=\"2. 异常\"></a>2. 异常</h1><h2 id=\"2-1-Java中的异常分为哪几类？各自的特点是什么？\"><a href=\"#2-1-Java中的异常分为哪几类？各自的特点是什么？\" class=\"headerlink\" title=\"2.1 Java中的异常分为哪几类？各自的特点是什么？\"></a>2.1 Java中的异常分为哪几类？各自的特点是什么？</h2><p>答：Java中的异常可以分为<strong>可查异常</strong>（Checked Exception）、<strong>运行时异常</strong>（Runtime Exception）和<strong>错误</strong>（Error）三类。可查异常需要在代码中显式捕获或声明抛出，运行时异常可以选择捕获或声明抛出，错误通常是指虚拟机相关的问题，无法恢复。</p>\n<h2 id=\"2-2-Java中的异常处理机制是什么？\"><a href=\"#2-2-Java中的异常处理机制是什么？\" class=\"headerlink\" title=\"2.2 Java中的异常处理机制是什么？\"></a>2.2 Java中的异常处理机制是什么？</h2><p>答：Java的异常处理机制使用try-catch-finally语句块来处理异常。try块用于包裹可能抛出异常的代码，catch块用于捕获和处理异常，finally块用于定义无论是否异常都需要执行的代码。</p>\n<h2 id=\"2-3-描述一下try-catch-finally语句块的执行流程。\"><a href=\"#2-3-描述一下try-catch-finally语句块的执行流程。\" class=\"headerlink\" title=\"2.3 描述一下try-catch-finally语句块的执行流程。\"></a>2.3 描述一下try-catch-finally语句块的执行流程。</h2><p>答：当try块中的代码出现异常时，会立即跳转到对应的catch块进行处理。如果发现catch块中可以处理该异常，会执行相应的代码，然后继续执行finally块中的代码；如果没有匹配的catch块，当前方法会立即结束，异常会<strong>被抛给上一级调用者或者由虚拟机处理</strong>。不论是否发生异常，finally块中的代码总会被执行。</p>\n<h2 id=\"2-4-throw和throws关键字的作用是什么？\"><a href=\"#2-4-throw和throws关键字的作用是什么？\" class=\"headerlink\" title=\"2.4 throw和throws关键字的作用是什么？\"></a>2.4 throw和throws关键字的作用是什么？</h2><p>答：throw关键字用于主动抛出一个异常对象，可以在任何地方使用。throws关键字用于在方法上声明可能抛出的异常类型，告诉调用者需要处理这些异常。</p>\n<h2 id=\"2-5-RuntimeException和Checked-Exception有什么区别？\"><a href=\"#2-5-RuntimeException和Checked-Exception有什么区别？\" class=\"headerlink\" title=\"2.5 RuntimeException和Checked Exception有什么区别？\"></a>2.5 RuntimeException和Checked Exception有什么区别？</h2><p>答：RuntimeException是运行时异常，程序员可以选择捕获或声明抛出，但<strong>不强制要求</strong>。Checked Exception是可查异常，需要在代码中显式捕获或声明抛出。区别在于<strong>编译器是否会强制检查异常的处理</strong>。</p>\n<h2 id=\"2-6-什么是异常链？\"><a href=\"#2-6-什么是异常链？\" class=\"headerlink\" title=\"2.6 什么是异常链？\"></a>2.6 什么是异常链？</h2><p>答：<strong>①捕获一个异常后抛出另一个异常，②并且希望把原始异常的信息保存下来</strong>，这被称为异常链。所有Throwable的子类在构造器中都可以接受一个cause（因由）对象作为参数。这个cause就用来表示原始异常，这样通过把原始异常传递给新的异常，使得即使在当前位置创建并抛出了新的异常，也能通过这个异常链追踪到异常最初发生的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLIntegrityConstraintViolationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMain</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwSQLIntegrityConstraintViolationException</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLIntegrityConstraintViolationException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SQLIntegrityConstraintViolationException</span>(<span class=\"string\">&quot;exception-SQLIntegrityConstraintViolationException&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwRuntimeException</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            throwSQLIntegrityConstraintViolationException();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            throwRuntimeException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getCause());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-7-什么时候应该使用finally块？\"><a href=\"#2-7-什么时候应该使用finally块？\" class=\"headerlink\" title=\"2.7 什么时候应该使用finally块？\"></a>2.7 什么时候应该使用finally块？</h2><p>答：finally块一般用于执行无论是否发生异常都需要执行的代码，例如释放资源、关闭连接等。在异常处理过程中，finally块中的代码总会被执行，保证资源的释放。</p>\n<h2 id=\"2-8-什么是异常处理的最佳实践？\"><a href=\"#2-8-什么是异常处理的最佳实践？\" class=\"headerlink\" title=\"2.8 什么是异常处理的最佳实践？\"></a>2.8 什么是异常处理的最佳实践？</h2><p>答：异常处理的最佳实践包括<strong>尽早捕获异常</strong>、<strong>准确抛出异常</strong>、<strong>避免空的catch块</strong>、<strong>适当使用finally块</strong>、<strong>理解并合理使用异常类型</strong>等。</p>\n<h2 id=\"2-9-Error和Exception有什么区别？\"><a href=\"#2-9-Error和Exception有什么区别？\" class=\"headerlink\" title=\"2.9 Error和Exception有什么区别？\"></a>2.9 Error和Exception有什么区别？</h2><p>答：Error是指虚拟机相关的问题或者系统级别的问题，一般由虚拟机处理。Exception是指程序运行时出现的异常，需要程序员处理。</p>\n<h2 id=\"2-10-什么是断言（assertion）和断言异常？\"><a href=\"#2-10-什么是断言（assertion）和断言异常？\" class=\"headerlink\" title=\"2.10 什么是断言（assertion）和断言异常？\"></a>2.10 什么是断言（assertion）和断言异常？</h2><p>答：断言用于在程序中进行验证和调试，通常用于在开发过程中<strong>检查程序的正确性</strong>。断言异常是一种特殊的异常，如java.lang.AssertionError，用于<strong>表示断言失败</strong>。</p>\n<h2 id=\"2-11-什么是异常处理的原则？\"><a href=\"#2-11-什么是异常处理的原则？\" class=\"headerlink\" title=\"2.11 什么是异常处理的原则？\"></a>2.11 什么是异常处理的原则？</h2><p>答：异常处理的原则包括“<strong>捕获并处理异常</strong>”、“<strong>仅捕获那些你能处理的</strong>异常”、“尽量<strong>不要捕获太宽泛的</strong>异常类型”和“<strong>使用合适的日志</strong>记录异常”。</p>\n<h2 id=\"2-12-描述一下finally块中的return语句会如何影响方法的返回值？\"><a href=\"#2-12-描述一下finally块中的return语句会如何影响方法的返回值？\" class=\"headerlink\" title=\"2.12 描述一下finally块中的return语句会如何影响方法的返回值？\"></a>2.12 描述一下finally块中的return语句会如何影响方法的返回值？</h2><p>答：如果在finally块中使用了return语句，<strong>会覆盖在try块中使用的return语句</strong>，即以finally块中的return值为准。</p>\n<h2 id=\"2-13-什么是异常的传递？\"><a href=\"#2-13-什么是异常的传递？\" class=\"headerlink\" title=\"2.13 什么是异常的传递？\"></a>2.13 什么是异常的传递？</h2><p>答：异常的传递是指当一个方法抛出异常时，该异常会<strong>沿着调用栈向上传递</strong>，直到被捕获或者到达程序的顶层。</p>\n<h2 id=\"2-14-什么是异常的过滤？\"><a href=\"#2-14-什么是异常的过滤？\" class=\"headerlink\" title=\"2.14 什么是异常的过滤？\"></a>2.14 什么是异常的过滤？</h2><p>答：异常的过滤是指<strong>在catch块中通过条件判断</strong>来筛选和处理特定的异常情况。</p>\n<h2 id=\"2-15-在catch块中如何处理多个异常？\"><a href=\"#2-15-在catch块中如何处理多个异常？\" class=\"headerlink\" title=\"2.15 在catch块中如何处理多个异常？\"></a>2.15 在catch块中如何处理多个异常？</h2><p>答：可以使用多个catch块来处理不同的异常类型，或者使用一个catch块来处理多个异常类型，使用多个“|”分隔异常类型。</p>\n<h2 id=\"2-16-什么是堆栈轨迹（Stack-Trace）？\"><a href=\"#2-16-什么是堆栈轨迹（Stack-Trace）？\" class=\"headerlink\" title=\"2.16 什么是堆栈轨迹（Stack Trace）？\"></a>2.16 什么是堆栈轨迹（Stack Trace）？</h2><p>答：堆栈轨迹是指<strong>异常抛出时输出的一系列方法调用的信息</strong>，包括方法名、行号等，<strong>用于追踪异常发生的路径</strong>。</p>\n<h2 id=\"2-17-如何自定义异常？\"><a href=\"#2-17-如何自定义异常？\" class=\"headerlink\" title=\"2.17 如何自定义异常？\"></a>2.17 如何自定义异常？</h2><p>答：可以<strong>通过继承Exception或者RuntimeException类</strong>来创建自定义异常类，并添加相应的构造方法和其他属性。</p>\n<h2 id=\"2-18-说一下NullPointerException和ArrayIndexOutOfBoundsException异常。\"><a href=\"#2-18-说一下NullPointerException和ArrayIndexOutOfBoundsException异常。\" class=\"headerlink\" title=\"2.18 说一下NullPointerException和ArrayIndexOutOfBoundsException异常。\"></a>2.18 说一下NullPointerException和ArrayIndexOutOfBoundsException异常。</h2><p>答：NullPointerException是指访问空对象的属性或方法时抛出的异常，ArrayIndexOutOfBoundsException是指访问数组越界时抛出的异常。</p>\n<h2 id=\"2-19-如何处理异常时避免内存泄漏？\"><a href=\"#2-19-如何处理异常时避免内存泄漏？\" class=\"headerlink\" title=\"2.19 如何处理异常时避免内存泄漏？\"></a>2.19 如何处理异常时避免内存泄漏？</h2><p>答：可以<strong>在catch块中及时释放资源</strong>，尤其是对于输入输出流、数据库连接等需要手动关闭的资源。</p>\n<h2 id=\"2-20-异常捕获处理与错误码处理方式有何不同？\"><a href=\"#2-20-异常捕获处理与错误码处理方式有何不同？\" class=\"headerlink\" title=\"2.20 异常捕获处理与错误码处理方式有何不同？\"></a>2.20 异常捕获处理与错误码处理方式有何不同？</h2><p>答：异常捕获处理是一种以<strong>异常对象</strong>的形式表示程序执行中遇到的异常情况的方式，而错误码处理则是根据不同的情况返回不同的<strong>预定的错误码</strong>。 错误码处理相对简单，适用于简单的异常情况；异常捕获处理具有更好的可读性和可维护性，适用于复杂的异常情况。</p>\n<h1 id=\"3-常用类\"><a href=\"#3-常用类\" class=\"headerlink\" title=\"3. 常用类\"></a>3. 常用类</h1><h2 id=\"3-1-String是可变对象还是不可变对象？\"><a href=\"#3-1-String是可变对象还是不可变对象？\" class=\"headerlink\" title=\"3.1 String是可变对象还是不可变对象？\"></a>3.1 String是可变对象还是不可变对象？</h2><p>答：String是不可变对象，一旦创建就无法修改其值。每次对String进行修改操作都会生成一个新的String对象。</p>\n<h2 id=\"3-2-如何比较两个String的值是否相等？\"><a href=\"#3-2-如何比较两个String的值是否相等？\" class=\"headerlink\" title=\"3.2 如何比较两个String的值是否相等？\"></a>3.2 如何比较两个String的值是否相等？</h2><p>答：可以<strong>使用equals方法</strong>来比较两个String的值是否相等（被重写过，实际上是比较的是内存地址），例如：String s1 &#x3D; “Hello”; String s2 &#x3D; “Hello”; s1.equals(s2)。</p>\n<h2 id=\"3-3-和equals的区别？\"><a href=\"#3-3-和equals的区别？\" class=\"headerlink\" title=\"3.3 &#x3D;&#x3D;和equals的区别？\"></a>3.3 &#x3D;&#x3D;和equals的区别？</h2><p>答：&#x3D;&#x3D;比较基本类型，比较的是值，&#x3D;&#x3D;比较引用类型，比较的是内存地址。</p>\n<p>equlas是Object类的方法，<strong>本质上与&#x3D;&#x3D;一样</strong>，但是有些类重写了equals方法，比如String的equals被重写后，比较的是内存地址，另外<strong>重写了equlas后，也必须重写hashcode()方法</strong>。</p>\n<h2 id=\"3-4-String类的常用方法有哪些？\"><a href=\"#3-4-String类的常用方法有哪些？\" class=\"headerlink\" title=\"3.4 String类的常用方法有哪些？\"></a>3.4 String类的常用方法有哪些？</h2><p>答：String类的常用方法包括length()，charAt()，concat()，substring()，indexOf()，equals()，compareTo()等。</p>\n<h2 id=\"3-5-String和StringBuilder-StringBuffer的区别是什么？\"><a href=\"#3-5-String和StringBuilder-StringBuffer的区别是什么？\" class=\"headerlink\" title=\"3.5 String和StringBuilder&#x2F;StringBuffer的区别是什么？\"></a>3.5 String和StringBuilder&#x2F;StringBuffer的区别是什么？</h2><p>答：<strong>String是不可变对象</strong>，每次修改都会生成一个新的String对象；<strong>StringBuilder&#x2F;StringBuffer是可变对象</strong>，可以直接修改其值。</p>\n<h2 id=\"3-6-StringBuilder和StringBuffer有何区别？\"><a href=\"#3-6-StringBuilder和StringBuffer有何区别？\" class=\"headerlink\" title=\"3.6 StringBuilder和StringBuffer有何区别？\"></a>3.6 StringBuilder和StringBuffer有何区别？</h2><p>答：StringBuilder是<strong>非线程安全</strong>的，适用于单线程环境下；StringBuffer是<strong>线程安全</strong>的，适用于多线程环境下。</p>\n<h2 id=\"3-7-如何将一个字符串转换为大写字母或小写字母？\"><a href=\"#3-7-如何将一个字符串转换为大写字母或小写字母？\" class=\"headerlink\" title=\"3.7 如何将一个字符串转换为大写字母或小写字母？\"></a>3.7 如何将一个字符串转换为大写字母或小写字母？</h2><p>答：可以使用**toUpperCase()<strong>方法将字符串转换为大写字母，使用</strong>toLowerCase()**方法将字符串转换为小写字母。</p>\n<h2 id=\"3-8-如何判断一个字符串是否以特定的前缀或后缀开头或结尾？\"><a href=\"#3-8-如何判断一个字符串是否以特定的前缀或后缀开头或结尾？\" class=\"headerlink\" title=\"3.8 如何判断一个字符串是否以特定的前缀或后缀开头或结尾？\"></a>3.8 如何判断一个字符串是否以特定的前缀或后缀开头或结尾？</h2><p>答：可以使用**startsWith()<strong>判断字符串是否以特定的前缀开头，使用</strong>endsWith()**判断字符串是否以特定的后缀结尾。</p>\n<h2 id=\"3-9-如何将字符串拆分成数组或将数组拼接成字符串？\"><a href=\"#3-9-如何将字符串拆分成数组或将数组拼接成字符串？\" class=\"headerlink\" title=\"3.9 如何将字符串拆分成数组或将数组拼接成字符串？\"></a>3.9 如何将字符串拆分成数组或将数组拼接成字符串？</h2><p>答：可以使用**split()<strong>方法将字符串拆分成数组，使用</strong>join()**方法将数组拼接成字符串。</p>\n<h2 id=\"3-10-如何去除字符串中的空格或特定的字符？\"><a href=\"#3-10-如何去除字符串中的空格或特定的字符？\" class=\"headerlink\" title=\"3.10 如何去除字符串中的空格或特定的字符？\"></a>3.10 如何去除字符串中的空格或特定的字符？</h2><p>答：可以使用**trim()<strong>方法去除字符串中的前后空格，使用</strong>replace()**方法替换指定的字符。</p>\n<h2 id=\"3-11-String常量池是什么？\"><a href=\"#3-11-String常量池是什么？\" class=\"headerlink\" title=\"3.11 String常量池是什么？\"></a>3.11 String常量池是什么？</h2><p>答：String常量池是一个特殊的内存区域，用于存储字符串常量，避免重复创建相同的字符串对象。</p>\n<h2 id=\"3-12-如何比较两个String对象的引用是否相等？\"><a href=\"#3-12-如何比较两个String对象的引用是否相等？\" class=\"headerlink\" title=\"3.12 如何比较两个String对象的引用是否相等？\"></a>3.12 如何比较两个String对象的引用是否相等？</h2><p>答：可以使用&#x3D;&#x3D;操作符来比较两个String对象的引用是否相等，例如：String s1 &#x3D; “Hello”; String s2 &#x3D; “Hello”; s1 &#x3D;&#x3D; s2。</p>\n<h2 id=\"3-13-如何判断一个字符串是否包含另一个字符串？\"><a href=\"#3-13-如何判断一个字符串是否包含另一个字符串？\" class=\"headerlink\" title=\"3.13 如何判断一个字符串是否包含另一个字符串？\"></a>3.13 如何判断一个字符串是否包含另一个字符串？</h2><p>答：可以使用**contains()**方法来判断一个字符串是否包含另一个字符串，例如：String str &#x3D; “Hello World”; str.contains(“Hello”)。</p>\n<h2 id=\"3-14-如何将基本类型转换为对应的字符串表示？\"><a href=\"#3-14-如何将基本类型转换为对应的字符串表示？\" class=\"headerlink\" title=\"3.14 如何将基本类型转换为对应的字符串表示？\"></a>3.14 如何将基本类型转换为对应的字符串表示？</h2><p>答：可以使用valueOf()方法将基本类型转换为对应的字符串表示，例如：String num &#x3D; String.valueOf(10);</p>\n<h2 id=\"3-15-如何将字符串转换为对应的基本类型？\"><a href=\"#3-15-如何将字符串转换为对应的基本类型？\" class=\"headerlink\" title=\"3.15 如何将字符串转换为对应的基本类型？\"></a>3.15 如何将字符串转换为对应的基本类型？</h2><p>答：可以使用**parseXXX()**方法将字符串转换为对应的基本类型，例如：int num &#x3D; Integer.parseInt(“10”);</p>\n<h2 id=\"3-16-如何反转一个字符串？\"><a href=\"#3-16-如何反转一个字符串？\" class=\"headerlink\" title=\"3.16 如何反转一个字符串？\"></a>3.16 如何反转一个字符串？</h2><p>答：可以使用**StringBuilder&#x2F;StringBuffer的reverse()**方法来反转一个字符串，例如：StringBuilder sb &#x3D; new StringBuilder(“Hello”); sb.reverse();</p>\n<h2 id=\"3-17-String类中的-操作符和concat-方法有何区别？\"><a href=\"#3-17-String类中的-操作符和concat-方法有何区别？\" class=\"headerlink\" title=\"3.17 String类中的+操作符和concat()方法有何区别？\"></a>3.17 String类中的+操作符和concat()方法有何区别？</h2><p>答：String类中的+操作符底层实际上使用了<strong>StringBuilder&#x2F;StringBuffer的append()<strong>方法来进行字符串拼接；而concat()方法</strong>直接</strong>将字符串拼接。</p>\n<h2 id=\"3-18-如何截取字符串的子串？\"><a href=\"#3-18-如何截取字符串的子串？\" class=\"headerlink\" title=\"3.18 如何截取字符串的子串？\"></a>3.18 如何截取字符串的子串？</h2><p>答：可以使用**substring()**方法来截取字符串的子串，指定起始下标和结束下标，例如：String str &#x3D; “Hello World”; str.substring(6, 11);</p>\n<h2 id=\"3-19-如何将字符串转换为字符数组？\"><a href=\"#3-19-如何将字符串转换为字符数组？\" class=\"headerlink\" title=\"3.19 如何将字符串转换为字符数组？\"></a>3.19 如何将字符串转换为字符数组？</h2><p>答：可以使用**toCharArray()**方法将字符串转换为字符数组，例如：String str &#x3D; “Hello”; char[] charArray &#x3D; str.toCharArray();</p>\n<h2 id=\"3-20-如何将字符数组转换为字符串？\"><a href=\"#3-20-如何将字符数组转换为字符串？\" class=\"headerlink\" title=\"3.20 如何将字符数组转换为字符串？\"></a>3.20 如何将字符数组转换为字符串？</h2><p>答：可以使用<strong>String的构造方法</strong>或<strong>valueOf()方法</strong>将字符数组转换为字符串，例如：char[] charArray &#x3D; {‘H’, ‘e’, ‘l’, ‘l’, ‘o’}; String str &#x3D; new String(charArray);</p>\n<h2 id=\"3-21-String对象的内存分配是放在栈上还是堆上？\"><a href=\"#3-21-String对象的内存分配是放在栈上还是堆上？\" class=\"headerlink\" title=\"3.21 String对象的内存分配是放在栈上还是堆上？\"></a>3.21 String对象的内存分配是放在栈上还是堆上？</h2><p>答：String对象的<strong>引用放在栈上</strong>，而String<strong>对象本身存储在堆上</strong>。</p>\n<h2 id=\"3-22-如何将一个字符串转换为整数类型（int）？\"><a href=\"#3-22-如何将一个字符串转换为整数类型（int）？\" class=\"headerlink\" title=\"3.22 如何将一个字符串转换为整数类型（int）？\"></a>3.22 如何将一个字符串转换为整数类型（int）？</h2><p>答：可以使用**Integer.parseInt()**方法将字符串转换为整数类型，例如：String str &#x3D; “123”; int num &#x3D; Integer.parseInt(str);</p>\n<h2 id=\"3-23-如何将一个整数类型（int）转换为字符串？\"><a href=\"#3-23-如何将一个整数类型（int）转换为字符串？\" class=\"headerlink\" title=\"3.23 如何将一个整数类型（int）转换为字符串？\"></a>3.23 如何将一个整数类型（int）转换为字符串？</h2><p>答：可以使用<strong>String.valueOf()<strong>方法或者</strong>将整数类型与空字符串相加（+” “）</strong>来将整数类型转换为字符串，例如：int num &#x3D; 123; String str &#x3D; String.valueOf(num); 或者 String str &#x3D; num + “”;</p>\n<h2 id=\"3-24-如何判断一个字符串是否为空或者只包含空格？\"><a href=\"#3-24-如何判断一个字符串是否为空或者只包含空格？\" class=\"headerlink\" title=\"3.24 如何判断一个字符串是否为空或者只包含空格？\"></a>3.24 如何判断一个字符串是否为空或者只包含空格？</h2><p>答：可以使用**isEmpty()<strong>方法或者</strong>trim()**方法（若含有空格）来判断一个字符串是否为空，例如：String str &#x3D; “”; boolean isEmpty &#x3D; str.isEmpty(); 或者 String str &#x3D; “ “; boolean isBlank &#x3D; str.trim().isEmpty();</p>\n<h2 id=\"3-25-如何将一个字符串中的字符按照指定的分隔符拆分成数组？\"><a href=\"#3-25-如何将一个字符串中的字符按照指定的分隔符拆分成数组？\" class=\"headerlink\" title=\"3.25 如何将一个字符串中的字符按照指定的分隔符拆分成数组？\"></a>3.25 如何将一个字符串中的字符按照指定的分隔符拆分成数组？</h2><p>答：可以使用split()方法来将一个字符串按照指定的分隔符拆分成数组，例如：String str &#x3D; “Hello,World”; String[] arr &#x3D; str.split(“,”);</p>\n<h2 id=\"3-26-如何将字符串中的字符全部替换为指定字符？\"><a href=\"#3-26-如何将字符串中的字符全部替换为指定字符？\" class=\"headerlink\" title=\"3.26 如何将字符串中的字符全部替换为指定字符？\"></a>3.26 如何将字符串中的字符全部替换为指定字符？</h2><p>答：可以使用replace()方法来将字符串中的字符全部替换为指定字符，例如：String str &#x3D; “Hello World”; String newStr &#x3D; str.replace(‘o’, ‘*’); </p>\n<h2 id=\"3-27-如何将指定的字符插入到字符串指定的位置？\"><a href=\"#3-27-如何将指定的字符插入到字符串指定的位置？\" class=\"headerlink\" title=\"3.27 如何将指定的字符插入到字符串指定的位置？\"></a>3.27 如何将指定的字符插入到字符串指定的位置？</h2><p>答：可以使用substring()方法和concat()方法来将指定的字符插入到字符串指定的位置，例如：String str &#x3D; “Hello”; String newStr &#x3D; str.substring(0, 2).concat(“XX”).concat(str.substring(2));</p>\n<h2 id=\"3-28-如何将字符串转换为大写或小写，并忽略字符串中的特殊字符？\"><a href=\"#3-28-如何将字符串转换为大写或小写，并忽略字符串中的特殊字符？\" class=\"headerlink\" title=\"3.28 如何将字符串转换为大写或小写，并忽略字符串中的特殊字符？\"></a>3.28 如何将字符串转换为大写或小写，并忽略字符串中的特殊字符？</h2><p>答：可以使用**toLowerCase()<strong>方法或</strong>toUpperCase()<strong>方法将字符串转换为大写或小写，并使用</strong>replaceAll()**方法去除特殊字符，例如：String str &#x3D; “Hello,@World!”; String lowerCase &#x3D; str.replaceAll(“[ ^a-zA-Z0-9 ]”, “”).toLowerCase();</p>\n<h2 id=\"3-29-如何获取字符串中指定字符的索引位置？\"><a href=\"#3-29-如何获取字符串中指定字符的索引位置？\" class=\"headerlink\" title=\"3.29 如何获取字符串中指定字符的索引位置？\"></a>3.29 如何获取字符串中指定字符的索引位置？</h2><p>答：可以使用indexOf()方法或lastIndexOf()方法来获取字符串中指定字符的索引位置，例如：String str &#x3D; “Hello”; int index &#x3D; str.indexOf(‘o’);</p>\n<h2 id=\"3-30-如何将多个字符串拼接成一个字符串？\"><a href=\"#3-30-如何将多个字符串拼接成一个字符串？\" class=\"headerlink\" title=\"3.30 如何将多个字符串拼接成一个字符串？\"></a>3.30 如何将多个字符串拼接成一个字符串？</h2><p>答：可以使**用StringBuilder&#x2F;StringBuffer的append()**方法进行字符串拼接，例如：StringBuilder sb &#x3D; new StringBuilder(); sb.append(“Hello”).append(“World”);</p>\n<h2 id=\"3-31-如何判断两个字符串是否相等，忽略大小写？\"><a href=\"#3-31-如何判断两个字符串是否相等，忽略大小写？\" class=\"headerlink\" title=\"3.31 如何判断两个字符串是否相等，忽略大小写？\"></a>3.31 如何判断两个字符串是否相等，忽略大小写？</h2><p>答：可以使用**equalsIgnoreCase()**方法来判断两个字符串是否相等，忽略大小写，例如：String str1 &#x3D; “Hello”; String str2 &#x3D; “hello”; boolean isEqual &#x3D; str1.equalsIgnoreCase(str2);</p>\n<h2 id=\"3-32-Java中的八种基本类型与其对应的包装类分别是什么？\"><a href=\"#3-32-Java中的八种基本类型与其对应的包装类分别是什么？\" class=\"headerlink\" title=\"3.32 Java中的八种基本类型与其对应的包装类分别是什么？\"></a>3.32 Java中的八种基本类型与其对应的包装类分别是什么？</h2><p>答：八种基本类型及对应的包装类如下：boolean - Boolean、byte - Byte、char - Character、short - Short、<strong>int - Integer</strong>、long - Long、float - Float、double - Double。</p>\n<h2 id=\"3-33-如何将基本类型转换为对应的包装类？\"><a href=\"#3-33-如何将基本类型转换为对应的包装类？\" class=\"headerlink\" title=\"3.33 如何将基本类型转换为对应的包装类？\"></a>3.33 如何将基本类型转换为对应的包装类？</h2><p>答：可以使用<strong>包装类的构造方法</strong>或者**valueOf()**方法将基本类型转换为对应的包装类，例如：int num &#x3D; 10; Integer obj &#x3D; new Integer(num); 或者 Integer obj &#x3D; Integer.valueOf(num);</p>\n<h2 id=\"3-34-如何将包装类转换为对应的基本类型？\"><a href=\"#3-34-如何将包装类转换为对应的基本类型？\" class=\"headerlink\" title=\"3.34 如何将包装类转换为对应的基本类型？\"></a>3.34 如何将包装类转换为对应的基本类型？</h2><p>答：可以使用**包装类的xxxValue()**方法将包装类转换为对应的基本类型，例如：Integer obj &#x3D; new Integer(10); int num &#x3D; obj.intValue();</p>\n<h2 id=\"3-35-如何将字符串转换为对应的包装类？\"><a href=\"#3-35-如何将字符串转换为对应的包装类？\" class=\"headerlink\" title=\"3.35 如何将字符串转换为对应的包装类？\"></a>3.35 如何将字符串转换为对应的包装类？</h2><p>答：可以使用**包装类的valueOf()**方法将字符串转换为对应的包装类，例如：String str &#x3D; “10”; Integer obj &#x3D; Integer.valueOf(str);</p>\n<h2 id=\"3-36-如何将包装类转换为对应的字符串？\"><a href=\"#3-36-如何将包装类转换为对应的字符串？\" class=\"headerlink\" title=\"3.36 如何将包装类转换为对应的字符串？\"></a>3.36 如何将包装类转换为对应的字符串？</h2><p>答：可以使用**包装类的toString()**方法将包装类转换为对应的字符串，例如：Integer obj &#x3D; new Integer(10); String str &#x3D; obj.toString();</p>\n<h2 id=\"3-37-如何比较两个包装类的值是否相等？\"><a href=\"#3-37-如何比较两个包装类的值是否相等？\" class=\"headerlink\" title=\"3.37 如何比较两个包装类的值是否相等？\"></a>3.37 如何比较两个包装类的值是否相等？</h2><p>答：可以使用<strong>equals()方法</strong>或**&#x3D;&#x3D;**操作符来比较两个包装类的值是否相等，例如：Integer obj1 &#x3D; new Integer(10); Integer obj2 &#x3D; new Integer(10); boolean isEqual &#x3D; obj1.equals(obj2) 或者 obj1 &#x3D;&#x3D; obj2;</p>\n<h2 id=\"3-38-自动拆箱和自动装箱是什么意思？\"><a href=\"#3-38-自动拆箱和自动装箱是什么意思？\" class=\"headerlink\" title=\"3.38 自动拆箱和自动装箱是什么意思？\"></a>3.38 自动拆箱和自动装箱是什么意思？</h2><p>答：自动拆箱是指将包装类的对象自动转换为基本类型的过程，例如：Integer obj &#x3D; new Integer(10); int num &#x3D; obj; 自动装箱是指将基本类型自动转换为包装类的对象，例如：int num &#x3D; 10; Integer obj &#x3D; num;</p>\n<h2 id=\"3-39-包装类和基本类型存储在内存中的位置有什么区别？\"><a href=\"#3-39-包装类和基本类型存储在内存中的位置有什么区别？\" class=\"headerlink\" title=\"3.39 包装类和基本类型存储在内存中的位置有什么区别？\"></a>3.39 包装类和基本类型存储在内存中的位置有什么区别？</h2><p>答：基本类型的变量存储在栈内存中，而包装类<strong>对象</strong>存储在堆内存中。</p>\n<h2 id=\"3-40-包装类的缓存是什么意思？\"><a href=\"#3-40-包装类的缓存是什么意思？\" class=\"headerlink\" title=\"3.40 包装类的缓存是什么意思？\"></a>3.40 包装类的缓存是什么意思？</h2><p>答：在范围较小的数值范围中，Java的包装类会使用缓存来<strong>提高性能</strong>，例如Integer类会缓存-128至127之间的整数对象。</p>\n<h2 id=\"3-41-在使用包装类时如何避免空指针异常？\"><a href=\"#3-41-在使用包装类时如何避免空指针异常？\" class=\"headerlink\" title=\"3.41 在使用包装类时如何避免空指针异常？\"></a>3.41 在使用包装类时如何避免空指针异常？</h2><p>答：可以使用**包装类的valueOf()**方法，该方法如果传入的字符串为null，则会返回null值。例如：String str &#x3D; null; Integer obj &#x3D; Integer.valueOf(str);</p>\n<h2 id=\"3-42-String赋值给包装类对象时会发生什么？\"><a href=\"#3-42-String赋值给包装类对象时会发生什么？\" class=\"headerlink\" title=\"3.42 String赋值给包装类对象时会发生什么？\"></a>3.42 String赋值给包装类对象时会发生什么？</h2><p>答：当将一个String类型的值赋给包装类对象时，会自动调用包装类的valueOf()方法将字符串转换为包装类对象。</p>\n<h2 id=\"3-43-包装类有哪些方法可以将字符串转换为对应的基本类型？\"><a href=\"#3-43-包装类有哪些方法可以将字符串转换为对应的基本类型？\" class=\"headerlink\" title=\"3.43 包装类有哪些方法可以将字符串转换为对应的基本类型？\"></a>3.43 包装类有哪些方法可以将字符串转换为对应的基本类型？</h2><p>答：包装类提供了许多方法将字符串转换为对应的基本类型，例如：Boolean类的parseBoolean()、Byte类的parseByte()、Integer类的parseInt()等。</p>\n<h2 id=\"3-44-包装类的valueOf-方法和xxxValue-方法有什么区别？\"><a href=\"#3-44-包装类的valueOf-方法和xxxValue-方法有什么区别？\" class=\"headerlink\" title=\"3.44 包装类的valueOf()方法和xxxValue()方法有什么区别？\"></a>3.44 包装类的valueOf()方法和xxxValue()方法有什么区别？</h2><p>答：valueOf()方法将基本类型或字符串转换为包装类对象，xxxValue()方法将包装类对象转换为对应的基本类型。</p>\n<h2 id=\"3-45-包装类对象如何比较大小？\"><a href=\"#3-45-包装类对象如何比较大小？\" class=\"headerlink\" title=\"3.45 包装类对象如何比较大小？\"></a>3.45 包装类对象如何比较大小？</h2><p>答：可以使用**包装类的compareTo()**方法来比较大小，或者将包装类对象转换为基本类型后再进行比较。</p>\n<h2 id=\"3-46-为什么会出现基本类型和包装类之间的装箱和拆箱？\"><a href=\"#3-46-为什么会出现基本类型和包装类之间的装箱和拆箱？\" class=\"headerlink\" title=\"3.46 为什么会出现基本类型和包装类之间的装箱和拆箱？\"></a>3.46 为什么会出现基本类型和包装类之间的装箱和拆箱？</h2><p>答：基本类型和包装类之间的装箱和拆箱是为了在需要使用对象而只有基本类型的地方提供方便，同时也是为了实现一些储存和操作的需求。</p>\n<h2 id=\"3-47-如何判断一个变量的类型是否是包装类？\"><a href=\"#3-47-如何判断一个变量的类型是否是包装类？\" class=\"headerlink\" title=\"3.47 如何判断一个变量的类型是否是包装类？\"></a>3.47 如何判断一个变量的类型是否是包装类？</h2><p>答：可以使用instanceof关键字来判断一个变量的类型是否是包装类，例如：if (obj instanceof Integer) { &#x2F;&#x2F; do something }</p>\n<h2 id=\"3-48-包装类的作用是什么？\"><a href=\"#3-48-包装类的作用是什么？\" class=\"headerlink\" title=\"3.48 包装类的作用是什么？\"></a>3.48 包装类的作用是什么？</h2><p>答：包装类的主要作用是将基本类型转换为对象，以便于在需要使用对象的场景中进行操作，同时也提供了一些常用的方法和功能。</p>\n<h2 id=\"3-49-在什么情况下会自动拆箱和自动装箱？\"><a href=\"#3-49-在什么情况下会自动拆箱和自动装箱？\" class=\"headerlink\" title=\"3.49 在什么情况下会自动拆箱和自动装箱？\"></a>3.49 在什么情况下会自动拆箱和自动装箱？</h2><p>答：自动拆箱和自动装箱在需要使用基本类型的地方进行拆箱操作，或者在需要使用对象的地方进行装箱操作。</p>\n<h2 id=\"3-50-包装类和基本类型之间的转换会有什么影响？\"><a href=\"#3-50-包装类和基本类型之间的转换会有什么影响？\" class=\"headerlink\" title=\"3.50 包装类和基本类型之间的转换会有什么影响？\"></a>3.50 包装类和基本类型之间的转换会有什么影响？</h2><p>答：包装类和基本类型之间的转换会涉及到性能和内存消耗方面的影响，其中自动装箱和自动拆箱会带来一定的性能开销。 </p>\n<h2 id=\"3-51-Java中处理日期和时间的类有哪些？\"><a href=\"#3-51-Java中处理日期和时间的类有哪些？\" class=\"headerlink\" title=\"3.51 Java中处理日期和时间的类有哪些？\"></a>3.51 Java中处理日期和时间的类有哪些？</h2><p>答：Java中处理日期和时间的类主要有java.util.Date、java.util.Calendar、java.time.LocalDate、java.time.LocalDateTime等。</p>\n<h2 id=\"3-52-如何获取当前的日期和时间？\"><a href=\"#3-52-如何获取当前的日期和时间？\" class=\"headerlink\" title=\"3.52 如何获取当前的日期和时间？\"></a>3.52 如何获取当前的日期和时间？</h2><p>答：可以使用<strong>java.util.Date类的无参构造方法</strong>得到当前的日期和时间，或者使用**java.time.LocalDateTime的now()**方法。</p>\n<h2 id=\"3-53-如何格式化日期和时间？\"><a href=\"#3-53-如何格式化日期和时间？\" class=\"headerlink\" title=\"3.53 如何格式化日期和时间？\"></a>3.53 如何格式化日期和时间？</h2><p>答：可以使用<strong>java.text.SimpleDateFormat类</strong>来格式化日期和时间，通过指定格式的字符串将日期和时间转换为指定格式。</p>\n<h2 id=\"3-54-如何在Java中表示一个特定的日期？\"><a href=\"#3-54-如何在Java中表示一个特定的日期？\" class=\"headerlink\" title=\"3.54 如何在Java中表示一个特定的日期？\"></a>3.54 如何在Java中表示一个特定的日期？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDate类来表示一个特定的日期。</p>\n<h2 id=\"3-55-如何计算两个日期之间的天数差距？\"><a href=\"#3-55-如何计算两个日期之间的天数差距？\" class=\"headerlink\" title=\"3.55 如何计算两个日期之间的天数差距？\"></a>3.55 如何计算两个日期之间的天数差距？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDate类的方法来计算两个日期之间的天数差距，然后进行相减运算。</p>\n<h2 id=\"3-56-如何将日期转换为字符串？\"><a href=\"#3-56-如何将日期转换为字符串？\" class=\"headerlink\" title=\"3.56 如何将日期转换为字符串？\"></a>3.56 如何将日期转换为字符串？</h2><p>答：可以使用java.util.Date类的<strong>toString()<strong>方法将日期对象转换为字符串，或者使用</strong>java.text.SimpleDateFormat类</strong>进行自定义格式的转换。</p>\n<h2 id=\"3-57-如何将字符串转换为日期？\"><a href=\"#3-57-如何将字符串转换为日期？\" class=\"headerlink\" title=\"3.57 如何将字符串转换为日期？\"></a>3.57 如何将字符串转换为日期？</h2><p>答：可以使用java.text.SimpleDateFormat类的**parse()**方法将字符串转换为日期对象，需要指定匹配的日期格式。</p>\n<h2 id=\"3-58-如何在Java中进行日期的加减操作？\"><a href=\"#3-58-如何在Java中进行日期的加减操作？\" class=\"headerlink\" title=\"3.58 如何在Java中进行日期的加减操作？\"></a>3.58 如何在Java中进行日期的加减操作？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDateTime类的**add()**方法进行日期的加减操作。</p>\n<h2 id=\"3-59-Java中日期和时间的处理在多线程环境下是否安全？\"><a href=\"#3-59-Java中日期和时间的处理在多线程环境下是否安全？\" class=\"headerlink\" title=\"3.59 Java中日期和时间的处理在多线程环境下是否安全？\"></a>3.59 Java中日期和时间的处理在多线程环境下是否安全？</h2><p>答：java.util.Date类和java.util.Calendar类在多线程环境下是<strong>不安全</strong>的，可以使用<strong>java.time包</strong>中的类来实现线程安全的日期和时间处理。</p>\n<h2 id=\"3-60-Java中如何比较两个日期是否相等？\"><a href=\"#3-60-Java中如何比较两个日期是否相等？\" class=\"headerlink\" title=\"3.60 Java中如何比较两个日期是否相等？\"></a>3.60 Java中如何比较两个日期是否相等？</h2><p>答：可以使用<strong>java.util.Date类的equals()方法</strong>或者<strong>java.time.LocalDate类的isEqual()方法</strong>来判断两个日期是否相等。</p>\n<h2 id=\"3-61-Java中如何获取某个日期的年、月、日、星期等具体信息？\"><a href=\"#3-61-Java中如何获取某个日期的年、月、日、星期等具体信息？\" class=\"headerlink\" title=\"3.61 Java中如何获取某个日期的年、月、日、星期等具体信息？\"></a>3.61 Java中如何获取某个日期的年、月、日、星期等具体信息？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDate类的**get()**方法来获取某个日期的年、月、日、星期、一年中的第几天等具体信息。</p>\n<h2 id=\"3-62-Java中如何获取某个日期的下一天或上一天？\"><a href=\"#3-62-Java中如何获取某个日期的下一天或上一天？\" class=\"headerlink\" title=\"3.62 Java中如何获取某个日期的下一天或上一天？\"></a>3.62 Java中如何获取某个日期的下一天或上一天？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDate类的**add()**方法来进行日期的加减操作，从而得到下一天或上一天的日期。</p>\n<h2 id=\"3-63-Java中如何判断某个日期是在另一个日期之前还是之后？\"><a href=\"#3-63-Java中如何判断某个日期是在另一个日期之前还是之后？\" class=\"headerlink\" title=\"3.63 Java中如何判断某个日期是在另一个日期之前还是之后？\"></a>3.63 Java中如何判断某个日期是在另一个日期之前还是之后？</h2><p>答：可以使用java.util.Date类的**before()<strong>和</strong>after()**方法，或者使用java.time.LocalDate类的isBefore()和isAfter()方法来判断日期的先后关系。</p>\n<h2 id=\"3-64-Java中如何将日期设置为零点或午夜？\"><a href=\"#3-64-Java中如何将日期设置为零点或午夜？\" class=\"headerlink\" title=\"3.64 Java中如何将日期设置为零点或午夜？\"></a>3.64 Java中如何将日期设置为零点或午夜？</h2><p>答：可以使用java.util.Calendar类或java.time.LocalDateTime类的**set()**方法来将日期设置为零点或午夜。</p>\n<h2 id=\"3-65-Java中的String、StringBuffer和StringBuilder有什么区别？\"><a href=\"#3-65-Java中的String、StringBuffer和StringBuilder有什么区别？\" class=\"headerlink\" title=\"3.65 Java中的String、StringBuffer和StringBuilder有什么区别？\"></a>3.65 Java中的String、StringBuffer和StringBuilder有什么区别？</h2><p>答：String是<strong>不可变类</strong>，每次对String的操作都会创建新的String对象，StringBuffer和StringBuilder是<strong>可变类</strong>，可以在原始字符串上进行修改。</p>\n<h2 id=\"3-66-String、StringBuffer和StringBuilder之间的性能差异是什么？\"><a href=\"#3-66-String、StringBuffer和StringBuilder之间的性能差异是什么？\" class=\"headerlink\" title=\"3.66 String、StringBuffer和StringBuilder之间的性能差异是什么？\"></a>3.66 String、StringBuffer和StringBuilder之间的性能差异是什么？</h2><p>答：由于String是不可变的，每次对String进行操作时都会创建新的String对象，因此在频繁进行字符串操作时，使用StringBuffer和StringBuilder性能更好。 </p>\n<h2 id=\"3-67-StringBuffer和StringBuilder之间的区别是什么？\"><a href=\"#3-67-StringBuffer和StringBuilder之间的区别是什么？\" class=\"headerlink\" title=\"3.67 StringBuffer和StringBuilder之间的区别是什么？\"></a>3.67 StringBuffer和StringBuilder之间的区别是什么？</h2><p>答：StringBuffer是<strong>线程安全</strong>的，适用于多线程环境，而StringBuilder是<strong>非线程安全</strong>的，适用于单线程环境。</p>\n<h2 id=\"3-68-如何将String类型的字符串转换为StringBuffer或StringBuilder类型？\"><a href=\"#3-68-如何将String类型的字符串转换为StringBuffer或StringBuilder类型？\" class=\"headerlink\" title=\"3.68 如何将String类型的字符串转换为StringBuffer或StringBuilder类型？\"></a>3.68 如何将String类型的字符串转换为StringBuffer或StringBuilder类型？</h2><p>答：可以使用StringBuffer或StringBuilder的<strong>构造方法</strong>将String类型的字符串转换为StringBuffer或StringBuilder类型，例如：StringBuffer sb &#x3D; new StringBuffer(“Hello”); 或者 StringBuilder sb &#x3D; new StringBuilder(“Hello”);</p>\n<h2 id=\"3-69-如何在Java中连接多个字符串？\"><a href=\"#3-69-如何在Java中连接多个字符串？\" class=\"headerlink\" title=\"3.69 如何在Java中连接多个字符串？\"></a>3.69 如何在Java中连接多个字符串？</h2><p>答：可以使用”<strong>+</strong>“运算符进行字符串的连接，也可以使用**StringBuffer或StringBuilder的append()**方法进行字符串的连接。</p>\n<h2 id=\"3-70-为什么String对象是不可变的？\"><a href=\"#3-70-为什么String对象是不可变的？\" class=\"headerlink\" title=\"3.70 为什么String对象是不可变的？\"></a>3.70 为什么String对象是不可变的？</h2><p>答：String对象是不可变的，主要是为了提高<strong>字符串的安全性和线程安全性</strong>。</p>\n<h2 id=\"3-71-StringBuffer和StringBuilder的常用方法有哪些？\"><a href=\"#3-71-StringBuffer和StringBuilder的常用方法有哪些？\" class=\"headerlink\" title=\"3.71 StringBuffer和StringBuilder的常用方法有哪些？\"></a>3.71 StringBuffer和StringBuilder的常用方法有哪些？</h2><p>答：StringBuffer和StringBuilder具有相似的方法，包括append()、insert()、delete()、replace()、reverse()等方法。</p>\n<h2 id=\"3-72-何时应该使用StringBuffer，何时应该使用StringBuilder？\"><a href=\"#3-72-何时应该使用StringBuffer，何时应该使用StringBuilder？\" class=\"headerlink\" title=\"3.72 何时应该使用StringBuffer，何时应该使用StringBuilder？\"></a>3.72 何时应该使用StringBuffer，何时应该使用StringBuilder？</h2><p>答：应该在多线程环境下使用StringBuffer，因为它是线程安全的；在单线程环境下使用StringBuilder，因为它的性能更好。</p>\n<h2 id=\"3-73-如何定义一个枚举类？\"><a href=\"#3-73-如何定义一个枚举类？\" class=\"headerlink\" title=\"3.73 如何定义一个枚举类？\"></a>3.73 如何定义一个枚举类？</h2><p>答：可以使用<strong>enum</strong>关键字定义一个枚举类。</p>\n<h2 id=\"3-74-枚举类的常量有什么特点？\"><a href=\"#3-74-枚举类的常量有什么特点？\" class=\"headerlink\" title=\"3.74 枚举类的常量有什么特点？\"></a>3.74 枚举类的常量有什么特点？</h2><p>答：枚举类的常量是<strong>唯一</strong>的、<strong>有限</strong>的且<strong>已命名</strong>的，<strong>不能再次赋值</strong>。</p>\n<h2 id=\"3-75-枚举类的常量可以有自己的属性和方法吗？\"><a href=\"#3-75-枚举类的常量可以有自己的属性和方法吗？\" class=\"headerlink\" title=\"3.75 枚举类的常量可以有自己的属性和方法吗？\"></a>3.75 枚举类的常量可以有自己的属性和方法吗？</h2><p>答：是的，枚举类的常量可以有自己的属性和方法。</p>\n<h2 id=\"3-76-如何访问枚举类中的常量？\"><a href=\"#3-76-如何访问枚举类中的常量？\" class=\"headerlink\" title=\"3.76 如何访问枚举类中的常量？\"></a>3.76 如何访问枚举类中的常量？</h2><p>答：可以使用枚举<strong>类名</strong>和<strong>常量名</strong>来访问枚举类中的常量。</p>\n<h2 id=\"3-77-枚举类可以实现接口吗？\"><a href=\"#3-77-枚举类可以实现接口吗？\" class=\"headerlink\" title=\"3.77 枚举类可以实现接口吗？\"></a>3.77 枚举类可以实现接口吗？</h2><p>答：是的，枚举类可以实现一个或多个接口。</p>\n<h2 id=\"3-78-如何遍历枚举类中的常量？\"><a href=\"#3-78-如何遍历枚举类中的常量？\" class=\"headerlink\" title=\"3.78 如何遍历枚举类中的常量？\"></a>3.78 如何遍历枚举类中的常量？</h2><p>答：可以使用枚举类的**values()**方法获取枚举类的所有常量，并进行遍历。</p>\n<h2 id=\"3-79-如何通过字符串获取枚举类中的常量？\"><a href=\"#3-79-如何通过字符串获取枚举类中的常量？\" class=\"headerlink\" title=\"3.79 如何通过字符串获取枚举类中的常量？\"></a>3.79 如何通过字符串获取枚举类中的常量？</h2><p>答：可以使用枚举类的valueOf()方法，传入常量的字符串名称来获取对应的常量。</p>\n<h2 id=\"3-80-枚举类与普通类的区别是什么？\"><a href=\"#3-80-枚举类与普通类的区别是什么？\" class=\"headerlink\" title=\"3.80 枚举类与普通类的区别是什么？\"></a>3.80 枚举类与普通类的区别是什么？</h2><p>答：枚举类可以确保常量的<strong>唯一性</strong>且<strong>类型安全</strong>，可以<strong>直接</strong>比较和使用，而普通类则<strong>需要通过对象</strong>来比较和使用。</p>\n<h2 id=\"3-81-枚举类在实际开发中的应用场景有哪些？\"><a href=\"#3-81-枚举类在实际开发中的应用场景有哪些？\" class=\"headerlink\" title=\"3.81 枚举类在实际开发中的应用场景有哪些？\"></a>3.81 枚举类在实际开发中的应用场景有哪些？</h2><p>答：枚举类在实际开发中常用于定义一组<strong>相关常量</strong>、<strong>状态机</strong>、<strong>单例模式</strong>等场景。</p>\n<h2 id=\"3-82-如何比较两个枚举常量的顺序？\"><a href=\"#3-82-如何比较两个枚举常量的顺序？\" class=\"headerlink\" title=\"3.82 如何比较两个枚举常量的顺序？\"></a>3.82 如何比较两个枚举常量的顺序？</h2><p>答：可以使用枚举常量的**compareTo()**方法来比较两个枚举常量的顺序。</p>\n<h2 id=\"3-83-枚举类的构造方法可以是私有的吗？\"><a href=\"#3-83-枚举类的构造方法可以是私有的吗？\" class=\"headerlink\" title=\"3.83 枚举类的构造方法可以是私有的吗？\"></a>3.83 枚举类的构造方法可以是私有的吗？</h2><p>答：是的，枚举类的构造方法可以是私有的。</p>\n<h2 id=\"3-84-枚举类如何定义自己的方法？\"><a href=\"#3-84-枚举类如何定义自己的方法？\" class=\"headerlink\" title=\"3.84 枚举类如何定义自己的方法？\"></a>3.84 枚举类如何定义自己的方法？</h2><p>答：可以在枚举类中定义自己的方法，常量可以调用这些方法进行特定的操作。</p>\n<h2 id=\"3-85-枚举类可以继承其他类吗？\"><a href=\"#3-85-枚举类可以继承其他类吗？\" class=\"headerlink\" title=\"3.85 枚举类可以继承其他类吗？\"></a>3.85 枚举类可以继承其他类吗？</h2><p>答：Java中的枚举类<strong>默认继承自java.lang.Enum类，不支持继承其他类</strong>。</p>\n<h2 id=\"3-86-如何在枚举类中添加更多的属性？\"><a href=\"#3-86-如何在枚举类中添加更多的属性？\" class=\"headerlink\" title=\"3.86 如何在枚举类中添加更多的属性？\"></a>3.86 如何在枚举类中添加更多的属性？</h2><p>答：可以在枚举类中添加成员变量，并在构造方法中为其赋值，每个常量都会具有相应的属性。</p>\n<h2 id=\"3-87-枚举类的构造方法在何时被调用？\"><a href=\"#3-87-枚举类的构造方法在何时被调用？\" class=\"headerlink\" title=\"3.87 枚举类的构造方法在何时被调用？\"></a>3.87 枚举类的构造方法在何时被调用？</h2><p>答：每个枚举常量的构造方法在枚举<strong>类加载时被调用</strong>。</p>\n<h2 id=\"3-88-枚举类可以作为方法的参数和返回值吗？\"><a href=\"#3-88-枚举类可以作为方法的参数和返回值吗？\" class=\"headerlink\" title=\"3.88 枚举类可以作为方法的参数和返回值吗？\"></a>3.88 枚举类可以作为方法的参数和返回值吗？</h2><p>答：是的，枚举类可以作为方法的参数和返回值。</p>\n<h2 id=\"3-89-如何扩展枚举类的功能？\"><a href=\"#3-89-如何扩展枚举类的功能？\" class=\"headerlink\" title=\"3.89 如何扩展枚举类的功能？\"></a>3.89 如何扩展枚举类的功能？</h2><p>答：可以<strong>使用抽象方法</strong>，在枚举类的每个常量中实现该抽象方法，以便为每个常量定制不同的行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span>&#123;</span><br><span class=\"line\">    RED&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//枚举对象实现抽象方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;红色&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    GREEN&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//枚举对象实现抽象方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;绿色&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    BLUE&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//枚举对象实现抽象方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;蓝色&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getColor</span><span class=\"params\">()</span>;<span class=\"comment\">//定义抽象方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-90-枚举类可以实现单例模式吗？\"><a href=\"#3-90-枚举类可以实现单例模式吗？\" class=\"headerlink\" title=\"3.90 枚举类可以实现单例模式吗？\"></a>3.90 枚举类可以实现单例模式吗？</h2><p>答：是的，枚举类<strong>天然的单例模式</strong>可以保证线程安全和实例唯一性。  </p>\n<h1 id=\"4-多线程\"><a href=\"#4-多线程\" class=\"headerlink\" title=\"4. 多线程\"></a>4. 多线程</h1><h2 id=\"4-1-什么是线程？为什么要使用线程？\"><a href=\"#4-1-什么是线程？为什么要使用线程？\" class=\"headerlink\" title=\"4.1 什么是线程？为什么要使用线程？\"></a>4.1 什么是线程？为什么要使用线程？</h2><p>答：线程是程序执行的最小单位，使用线程可以同时执行多个任务，提高程序的并发性和处理能力。</p>\n<h2 id=\"4-2-Java中创建线程的方式有哪些？\"><a href=\"#4-2-Java中创建线程的方式有哪些？\" class=\"headerlink\" title=\"4.2 Java中创建线程的方式有哪些？\"></a>4.2 Java中创建线程的方式有哪些？</h2><p>答：Java中创建线程的方式有两种：继承Thread类和实现Runnable接口。</p>\n<h2 id=\"4-3-创建线程的方式中，哪种更常用？为什么？\"><a href=\"#4-3-创建线程的方式中，哪种更常用？为什么？\" class=\"headerlink\" title=\"4.3 创建线程的方式中，哪种更常用？为什么？\"></a>4.3 创建线程的方式中，哪种更常用？为什么？</h2><p>答：更常用的方式是实现<strong>Runnable接口</strong>，因为Java不支持多重继承，通过实现Runnable接口可以更好地组织和管理线程。</p>\n<h2 id=\"4-4-如何启动一个线程？\"><a href=\"#4-4-如何启动一个线程？\" class=\"headerlink\" title=\"4.4 如何启动一个线程？\"></a>4.4 如何启动一个线程？</h2><p>答：启动一个线程可以调用线程对象的**start()**方法。</p>\n<h2 id=\"4-5-run-方法和start-方法有什么区别？\"><a href=\"#4-5-run-方法和start-方法有什么区别？\" class=\"headerlink\" title=\"4.5 run()方法和start()方法有什么区别？\"></a>4.5 run()方法和start()方法有什么区别？</h2><p>答：run()方法是线程的执行方法，通过调用start()方法来启动线程，会自动<strong>调用</strong>run()方法。</p>\n<h2 id=\"4-6-线程的生命周期有哪些状态？\"><a href=\"#4-6-线程的生命周期有哪些状态？\" class=\"headerlink\" title=\"4.6 线程的生命周期有哪些状态？\"></a>4.6 线程的生命周期有哪些状态？</h2><p>答：线程的生命周期包括<strong>新建</strong>状态、<strong>就绪</strong>状态、<strong>运行</strong>状态、<strong>阻塞</strong>状态和<strong>死亡</strong>状态。</p>\n<h2 id=\"4-7-怎样停止一个正在运行的线程？\"><a href=\"#4-7-怎样停止一个正在运行的线程？\" class=\"headerlink\" title=\"4.7 怎样停止一个正在运行的线程？\"></a>4.7 怎样停止一个正在运行的线程？</h2><p>答：通常使用<strong>标志位</strong>的方式停止一个线程，通过修改标志位来控制线程的执行。</p>\n<h2 id=\"4-8-什么是线程安全？如何保证线程安全？\"><a href=\"#4-8-什么是线程安全？如何保证线程安全？\" class=\"headerlink\" title=\"4.8 什么是线程安全？如何保证线程安全？\"></a>4.8 什么是线程安全？如何保证线程安全？</h2><p>答：线程安全是指多个线程访问共享数据时，不会出现数据不一致或数据冲突的情况。可以使用<strong>synchronized关键字</strong>或<strong>Lock接口</strong>来保证线程安全。</p>\n<h2 id=\"4-9-什么是线程间通信？如何实现线程间通信？\"><a href=\"#4-9-什么是线程间通信？如何实现线程间通信？\" class=\"headerlink\" title=\"4.9 什么是线程间通信？如何实现线程间通信？\"></a>4.9 什么是线程间通信？如何实现线程间通信？</h2><p>答：线程间通信是指多个线程之间通过发送和接收消息来进行协作。可以使用<strong>wait()、notify()和notifyAll()方法</strong>实现线程间通信。</p>\n<h2 id=\"4-10-什么是线程死锁？如何避免线程死锁？\"><a href=\"#4-10-什么是线程死锁？如何避免线程死锁？\" class=\"headerlink\" title=\"4.10 什么是线程死锁？如何避免线程死锁？\"></a>4.10 什么是线程死锁？如何避免线程死锁？</h2><p>答：线程死锁是指多个线程<strong>相互等待</strong>对方释放资源而无法继续执行的情况。可以避免线程死锁的方法包括<strong>避免循环等待</strong>、<strong>按照相同的顺序获取资源</strong>等。</p>\n<h2 id=\"4-11-什么是线程优先级？如何设置线程优先级？\"><a href=\"#4-11-什么是线程优先级？如何设置线程优先级？\" class=\"headerlink\" title=\"4.11 什么是线程优先级？如何设置线程优先级？\"></a>4.11 什么是线程优先级？如何设置线程优先级？</h2><p>答：线程优先级是操作系统对线程调度的参考值，可以使用<strong>setPriority()方法</strong>设置线程的优先级。</p>\n<h2 id=\"4-12-什么是守护线程？\"><a href=\"#4-12-什么是守护线程？\" class=\"headerlink\" title=\"4.12 什么是守护线程？\"></a>4.12 什么是守护线程？</h2><p>答：守护线程是在后台运行的线程，当所有非守护线程结束时，守护线程会<strong>自动退出</strong>。</p>\n<h2 id=\"4-13-什么是线程的上下文切换？在什么情况下会发生线程的上下文切换？\"><a href=\"#4-13-什么是线程的上下文切换？在什么情况下会发生线程的上下文切换？\" class=\"headerlink\" title=\"4.13 什么是线程的上下文切换？在什么情况下会发生线程的上下文切换？\"></a>4.13 什么是线程的上下文切换？在什么情况下会发生线程的上下文切换？</h2><p>答：线程的上下文切换是指CPU从一个线程切换到另一个线程执行的过程。线程的上下文切换会在<strong>多核CPU中</strong>或出现<strong>线程阻塞</strong>和<strong>线程优先级变化</strong>时发生。</p>\n<h2 id=\"4-14-什么是线程池？为什么要使用线程池？\"><a href=\"#4-14-什么是线程池？为什么要使用线程池？\" class=\"headerlink\" title=\"4.14 什么是线程池？为什么要使用线程池？\"></a>4.14 什么是线程池？为什么要使用线程池？</h2><p>答：线程池是一种<strong>管理</strong>和<strong>复用线程</strong>的机制，可以避免重复创建和销毁线程，提高资源利用率和系统性能。</p>\n<h2 id=\"4-15-Java中如何使用线程池？\"><a href=\"#4-15-Java中如何使用线程池？\" class=\"headerlink\" title=\"4.15 Java中如何使用线程池？\"></a>4.15 Java中如何使用线程池？</h2><p>答：可以通过<strong>ThreadPoolExecutor类</strong>或<strong>Executors工具类</strong>来创建线程池。</p>\n<h2 id=\"4-16-线程池有哪些常用的创建方式？\"><a href=\"#4-16-线程池有哪些常用的创建方式？\" class=\"headerlink\" title=\"4.16 线程池有哪些常用的创建方式？\"></a>4.16 线程池有哪些常用的创建方式？</h2><p>答：常用的创建线程池的方式有n**ewFixedThreadPool()<strong>、</strong>newCachedThreadPool()<strong>、</strong>newSingleThreadExecutor()**等。</p>\n<h2 id=\"4-17-线程池的核心线程数和最大线程数有什么区别？\"><a href=\"#4-17-线程池的核心线程数和最大线程数有什么区别？\" class=\"headerlink\" title=\"4.17 线程池的核心线程数和最大线程数有什么区别？\"></a>4.17 线程池的核心线程数和最大线程数有什么区别？</h2><p>答：核心线程数是线程池<strong>最少保留</strong>的线程数，最大线程数是线程池所能容纳的最大线程数。</p>\n<h2 id=\"4-18-什么是线程池的拒绝策略？\"><a href=\"#4-18-什么是线程池的拒绝策略？\" class=\"headerlink\" title=\"4.18 什么是线程池的拒绝策略？\"></a>4.18 什么是线程池的拒绝策略？</h2><p>答：线程池的拒绝策略指当线程池中的<strong>任务队列已满</strong>并且<strong>线程数达到最大线程数</strong>时，线程池如何处理无法继续执行的任务。</p>\n<h2 id=\"4-19-什么是线程局部变量？\"><a href=\"#4-19-什么是线程局部变量？\" class=\"headerlink\" title=\"4.19 什么是线程局部变量？\"></a>4.19 什么是线程局部变量？</h2><p>答：线程局部变量是每个线程<strong>独立拥有</strong>的变量，每个线程都可以对其进行读写操作。</p>\n<h2 id=\"4-20-什么是ThreadLocal类？如何在多线程中使用ThreadLocal？\"><a href=\"#4-20-什么是ThreadLocal类？如何在多线程中使用ThreadLocal？\" class=\"headerlink\" title=\"4.20 什么是ThreadLocal类？如何在多线程中使用ThreadLocal？\"></a>4.20 什么是ThreadLocal类？如何在多线程中使用ThreadLocal？</h2><p>答：ThreadLocal类是Java中用于<strong>存储线程局部变量的类</strong>，每个线程<strong>都有</strong>一个与之关联的ThreadLocal对象，通过<strong>ThreadLocal的get()和set()方法</strong>可以在多线程中访问和修改线程局部变量。</p>\n<h2 id=\"4-21-Java中有几种锁的类型？请列举并简要解释。\"><a href=\"#4-21-Java中有几种锁的类型？请列举并简要解释。\" class=\"headerlink\" title=\"4.21 Java中有几种锁的类型？请列举并简要解释。\"></a>4.21 Java中有几种锁的类型？请列举并简要解释。</h2><p>答：Java中有两种锁的类型，分别为<strong>对象锁</strong>（也称为内部锁或监视器锁）和<strong>类锁</strong>（也称为静态锁）。对象锁是在对象上的锁，使只有一个线程可以访问对象的同步代码块。类锁是在类上的锁，使只有一个线程可以访问类的同步代码块。</p>\n<h2 id=\"4-22-synchronized关键字和Lock接口之间有什么区别？\"><a href=\"#4-22-synchronized关键字和Lock接口之间有什么区别？\" class=\"headerlink\" title=\"4.22 synchronized关键字和Lock接口之间有什么区别？\"></a>4.22 synchronized关键字和Lock接口之间有什么区别？</h2><p>答：synchronized关键字是Java<strong>内置的锁机制</strong>，<strong>用于实现线程同步</strong>。Lock接口是Java提供的更灵活、更强大的锁机制，可以实现更复杂的同步方式。</p>\n<h2 id=\"4-23-请解释一下volatile关键字的作用。\"><a href=\"#4-23-请解释一下volatile关键字的作用。\" class=\"headerlink\" title=\"4.23 请解释一下volatile关键字的作用。\"></a>4.23 请解释一下volatile关键字的作用。</h2><p>答：volatile关键字用于<strong>保证被修饰的变量在多线程环境下的可见性和禁止指令重排序</strong>。它是一种<strong>轻量级的同步机制</strong>，适用于变量的读多写少的场景。</p>\n<h2 id=\"4-24-Java中的线程调度算法是什么？如何改变线程的调度优先级？\"><a href=\"#4-24-Java中的线程调度算法是什么？如何改变线程的调度优先级？\" class=\"headerlink\" title=\"4.24 Java中的线程调度算法是什么？如何改变线程的调度优先级？\"></a>4.24 Java中的线程调度算法是什么？如何改变线程的调度优先级？</h2><p>答：Java中的线程调度算法是<strong>抢占式调度算法</strong>（preemptive scheduling），通过线程的优先级来决定下一个应该执行的线程。可以使用<strong>setPriority()方法</strong>来改变线程的调度优先级。</p>\n<h2 id=\"4-25-什么是线程安全的集合？Java中有哪些线程安全的集合类？\"><a href=\"#4-25-什么是线程安全的集合？Java中有哪些线程安全的集合类？\" class=\"headerlink\" title=\"4.25 什么是线程安全的集合？Java中有哪些线程安全的集合类？\"></a>4.25 什么是线程安全的集合？Java中有哪些线程安全的集合类？</h2><p>答：线程安全的集合是在多线程环境下可以安全使用的集合。Java中有诸如<strong>Vector</strong>、<strong>Hashtable</strong>、<strong>ConcurrentHashMap</strong>、<strong>CopyOnWriteArrayList</strong>和<strong>ConcurrentLinkedQueue</strong>等<strong>线程安全</strong>的集合类。</p>\n<h2 id=\"4-26-什么是线程的上下文ClassLoader？它有什么作用？\"><a href=\"#4-26-什么是线程的上下文ClassLoader？它有什么作用？\" class=\"headerlink\" title=\"4.26 什么是线程的上下文ClassLoader？它有什么作用？\"></a>4.26 什么是线程的上下文ClassLoader？它有什么作用？</h2><p>答：线程的上下文ClassLoader<strong>是线程的一个属性</strong>，用于寻找和加载类文件。ClassLoader可以<strong>指定</strong>线程在运行时加载类所使用的<strong>类加载器</strong>。</p>\n<h2 id=\"4-27-什么是线程的上下文切换开销？如何减少上下文切换开销？\"><a href=\"#4-27-什么是线程的上下文切换开销？如何减少上下文切换开销？\" class=\"headerlink\" title=\"4.27 什么是线程的上下文切换开销？如何减少上下文切换开销？\"></a>4.27 什么是线程的上下文切换开销？如何减少上下文切换开销？</h2><p>答：线程的上下文切换开销是指在同一CPU内核上切换线程所耗费的时间和资源。可以通过减少线程的数量、避免线程的频繁切换和优化线程的调度来减少上下文切换开销。</p>\n<h2 id=\"4-28-什么是线程的运行状态不安全问题（Race-Condition）？如何避免？\"><a href=\"#4-28-什么是线程的运行状态不安全问题（Race-Condition）？如何避免？\" class=\"headerlink\" title=\"4.28 什么是线程的运行状态不安全问题（Race Condition）？如何避免？\"></a>4.28 什么是线程的运行状态不安全问题（Race Condition）？如何避免？</h2><p>答：线程的运行状态不安全问题是由于多个线程同时访问和修改共享数据而导致的不确定性问题。可以使用<strong>同步机制（如锁）</strong>或使用<strong>线程安全的数据结构</strong>来避免运行状态不安全问题。</p>\n<h2 id=\"4-29-什么是线程的休眠和阻塞？\"><a href=\"#4-29-什么是线程的休眠和阻塞？\" class=\"headerlink\" title=\"4.29 什么是线程的休眠和阻塞？\"></a>4.29 什么是线程的休眠和阻塞？</h2><p>答：线程的休眠是指让线程暂停一段时间执行，可以使用<strong>Thread.sleep()<strong>来实现。线程的阻塞是指暂停线程的执行，直到某个条件满足，可以使用</strong>Object类的wait()方法</strong>来实现。</p>\n<h2 id=\"4-30-什么是线程的调度策略？Java中的线程调度策略是什么？\"><a href=\"#4-30-什么是线程的调度策略？Java中的线程调度策略是什么？\" class=\"headerlink\" title=\"4.30 什么是线程的调度策略？Java中的线程调度策略是什么？\"></a>4.30 什么是线程的调度策略？Java中的线程调度策略是什么？</h2><p>答：线程的调度策略是指操作系统或虚拟机如何决定在何时执行哪个线程。Java中的线程调度策略是<strong>由操作系统控制</strong>，通常<strong>基于线程的优先级和调度算法来决定</strong>。</p>\n<h2 id=\"4-31-什么是线程锁？\"><a href=\"#4-31-什么是线程锁？\" class=\"headerlink\" title=\"4.31 什么是线程锁？\"></a>4.31 什么是线程锁？</h2><p>答：线程锁是一种同步机制，用于<strong>保护共享资源</strong>在多线程环境下的安全访问。</p>\n<h2 id=\"4-32-Java中有哪些线程锁机制？\"><a href=\"#4-32-Java中有哪些线程锁机制？\" class=\"headerlink\" title=\"4.32 Java中有哪些线程锁机制？\"></a>4.32 Java中有哪些线程锁机制？</h2><p>答：Java中有两种线程锁机制，分别为<strong>synchronized关键字</strong>和<strong>Lock接口</strong>。</p>\n<h2 id=\"4-33-synchronized关键字的作用是什么？\"><a href=\"#4-33-synchronized关键字的作用是什么？\" class=\"headerlink\" title=\"4.33 synchronized关键字的作用是什么？\"></a>4.33 synchronized关键字的作用是什么？</h2><p>答：synchronized关键字用于实现线程的<strong>互斥访问</strong>，确保同一时刻只有一个线程可以访问被synchronized关键字保护的代码块。</p>\n<h2 id=\"4-34-synchronized关键字有哪些使用方式？\"><a href=\"#4-34-synchronized关键字有哪些使用方式？\" class=\"headerlink\" title=\"4.34 synchronized关键字有哪些使用方式？\"></a>4.34 synchronized关键字有哪些使用方式？</h2><p>答：synchronized关键字可以修饰<strong>实例方法</strong>、<strong>静态方法</strong>和<strong>代码块</strong>。</p>\n<h2 id=\"4-35-什么是悲观锁和乐观锁？\"><a href=\"#4-35-什么是悲观锁和乐观锁？\" class=\"headerlink\" title=\"4.35 什么是悲观锁和乐观锁？\"></a>4.35 什么是悲观锁和乐观锁？</h2><p>答：悲观锁是指假设会发生并发冲突，<strong>每次</strong>访问共享资源都会加锁。乐观锁是指假设不会发生并发冲突，<strong>只有在更新时</strong>才检查是否有冲突。</p>\n<h2 id=\"4-36-什么是可重入锁（Reentrant-Lock）？\"><a href=\"#4-36-什么是可重入锁（Reentrant-Lock）？\" class=\"headerlink\" title=\"4.36 什么是可重入锁（Reentrant Lock）？\"></a>4.36 什么是可重入锁（Reentrant Lock）？</h2><p>答：可重入锁是指<strong>同一个线程</strong>可以<strong>多次</strong>获得<strong>同一个锁</strong>，用于解决线程在<strong>递归</strong>调用等情况下对资源的<strong>重复加锁问题</strong>。</p>\n<h2 id=\"4-37-什么是读写锁（ReadWriteLock）？\"><a href=\"#4-37-什么是读写锁（ReadWriteLock）？\" class=\"headerlink\" title=\"4.37 什么是读写锁（ReadWriteLock）？\"></a>4.37 什么是读写锁（ReadWriteLock）？</h2><p>答：读写锁是一种特殊的锁机制，允许<strong>多个</strong>线程同时<strong>读取</strong>共享资源，但在<strong>写</strong>操作时只允许<strong>一个</strong>线程访问。</p>\n<h2 id=\"4-38-什么是公平锁和非公平锁？\"><a href=\"#4-38-什么是公平锁和非公平锁？\" class=\"headerlink\" title=\"4.38 什么是公平锁和非公平锁？\"></a>4.38 什么是公平锁和非公平锁？</h2><p>答：公平锁是指线程按照请求的<strong>顺序获得锁</strong>，非公平锁是指线程在请求时不考虑顺序，<strong>有机会直接获得锁</strong>。</p>\n<h2 id=\"4-39-如何避免死锁？\"><a href=\"#4-39-如何避免死锁？\" class=\"headerlink\" title=\"4.39 如何避免死锁？\"></a>4.39 如何避免死锁？</h2><p>答：避免死锁的方法包括<strong>避免循环等待</strong>、<strong>按照相同的顺序获取锁</strong>、<strong>设置超时时间</strong>等。</p>\n<h2 id=\"4-40-什么是线程的通信？\"><a href=\"#4-40-什么是线程的通信？\" class=\"headerlink\" title=\"4.40 什么是线程的通信？\"></a>4.40 什么是线程的通信？</h2><p>答：线程的通信是指多个线程之间通过共享变量进行交互和传递信息的过程。</p>\n<h2 id=\"4-41-Java中如何进行线程的通信？\"><a href=\"#4-41-Java中如何进行线程的通信？\" class=\"headerlink\" title=\"4.41 Java中如何进行线程的通信？\"></a>4.41 Java中如何进行线程的通信？</h2><p>答：Java中可以使用Object类的wait()、notify()和notifyAll()方法进行线程的通信。</p>\n<h2 id=\"4-42-wait-和sleep-方法有什么区别？\"><a href=\"#4-42-wait-和sleep-方法有什么区别？\" class=\"headerlink\" title=\"4.42 wait()和sleep()方法有什么区别？\"></a>4.42 wait()和sleep()方法有什么区别？</h2><p>答：wait()方法是Object类的方法，用于暂停线程的执行，并释放锁；sleep()方法是Thread类的方法，用于暂停线程的执行，但不释放锁。</p>\n<h2 id=\"4-43-为什么wait-、notify-和notifyAll-方法必须在synchronized块内调用？\"><a href=\"#4-43-为什么wait-、notify-和notifyAll-方法必须在synchronized块内调用？\" class=\"headerlink\" title=\"4.43 为什么wait()、notify()和notifyAll()方法必须在synchronized块内调用？\"></a>4.43 为什么wait()、notify()和notifyAll()方法必须在synchronized块内调用？</h2><p>答：wait()、notify()和notifyAll()方法必须在synchronized块内调用，因为它们依赖于对象的监视器锁。</p>\n<h2 id=\"4-44-wait-方法和notify-方法的调用顺序有要求吗？\"><a href=\"#4-44-wait-方法和notify-方法的调用顺序有要求吗？\" class=\"headerlink\" title=\"4.44 wait()方法和notify()方法的调用顺序有要求吗？\"></a>4.44 wait()方法和notify()方法的调用顺序有要求吗？</h2><p>答：是的，wait()方法应该在notify()方法之前被调用。</p>\n<h2 id=\"4-45-为什么调用notify-方法后，不会立即释放锁？\"><a href=\"#4-45-为什么调用notify-方法后，不会立即释放锁？\" class=\"headerlink\" title=\"4.45 为什么调用notify()方法后，不会立即释放锁？\"></a>4.45 为什么调用notify()方法后，不会立即释放锁？</h2><p>答：调用notify()方法后，线程只是通知其他线程可以竞争锁，但不会立即释放锁。</p>\n<h2 id=\"4-46-notify-方法会通知哪个线程？\"><a href=\"#4-46-notify-方法会通知哪个线程？\" class=\"headerlink\" title=\"4.46 notify()方法会通知哪个线程？\"></a>4.46 notify()方法会通知哪个线程？</h2><p>答：notify()方法会随机通知等待该对象锁的一个线程。</p>\n<h2 id=\"4-47-notifyAll-方法会通知哪些线程？\"><a href=\"#4-47-notifyAll-方法会通知哪些线程？\" class=\"headerlink\" title=\"4.47 notifyAll()方法会通知哪些线程？\"></a>4.47 notifyAll()方法会通知哪些线程？</h2><p>答：notifyAll()方法会通知等待该对象锁的所有线程，让它们重新竞争锁。</p>\n<h2 id=\"4-48-为什么在调用wait-方法时，需要使用while循环来测试条件？\"><a href=\"#4-48-为什么在调用wait-方法时，需要使用while循环来测试条件？\" class=\"headerlink\" title=\"4.48 为什么在调用wait()方法时，需要使用while循环来测试条件？\"></a>4.48 为什么在调用wait()方法时，需要使用while循环来测试条件？</h2><p>答：在多线程环境下，wait()方法被唤醒后，线程仍需再次检查等待条件是否满足，以防止虚假唤醒。</p>\n<h2 id=\"4-49-如何唤醒处于wait状态的线程？\"><a href=\"#4-49-如何唤醒处于wait状态的线程？\" class=\"headerlink\" title=\"4.49 如何唤醒处于wait状态的线程？\"></a>4.49 如何唤醒处于wait状态的线程？</h2><p>答：可以使用notify()方法或notifyAll()方法来唤醒处于wait状态的线程。</p>\n<h2 id=\"4-50-wait-方法和await-方法有什么区别？\"><a href=\"#4-50-wait-方法和await-方法有什么区别？\" class=\"headerlink\" title=\"4.50 wait()方法和await()方法有什么区别？\"></a>4.50 wait()方法和await()方法有什么区别？</h2><p>答：wait()方法是Object类的方法，用于线程的等待；await()方法是Condition接口中的方法，用于线程的等待指定条件满足。</p>\n<h2 id=\"4-51-为什么使用notifyAll-方法而不是notify-方法？\"><a href=\"#4-51-为什么使用notifyAll-方法而不是notify-方法？\" class=\"headerlink\" title=\"4.51 为什么使用notifyAll()方法而不是notify()方法？\"></a>4.51 为什么使用notifyAll()方法而不是notify()方法？</h2><p>答：使用notifyAll()方法可以通知所有等待该对象锁的线程，确保不会有线程被遗漏。</p>\n<h2 id=\"4-52-如何防止线程的等待超时？\"><a href=\"#4-52-如何防止线程的等待超时？\" class=\"headerlink\" title=\"4.52 如何防止线程的等待超时？\"></a>4.52 如何防止线程的等待超时？</h2><p>答：可以使用wait()方法的重载版本wait(long timeout)来设置等待的超时时间。</p>\n<h2 id=\"4-53-为什么wait-方法和notify-方法定义在Object类中而不是Thread类中？\"><a href=\"#4-53-为什么wait-方法和notify-方法定义在Object类中而不是Thread类中？\" class=\"headerlink\" title=\"4.53 为什么wait()方法和notify()方法定义在Object类中而不是Thread类中？\"></a>4.53 为什么wait()方法和notify()方法定义在Object类中而不是Thread类中？</h2><p>答：wait()方法和notify()方法定义在Object类中是因为每个对象都有一个锁和一个等待集，而线程只是操作对象的锁和等待集。</p>\n<h2 id=\"4-54-为什么wait-方法和notify-方法被定义为final？\"><a href=\"#4-54-为什么wait-方法和notify-方法被定义为final？\" class=\"headerlink\" title=\"4.54 为什么wait()方法和notify()方法被定义为final？\"></a>4.54 为什么wait()方法和notify()方法被定义为final？</h2><p>答：wait()方法和notify()方法被定义为final，是为了防止子类对其进行重写。</p>\n<h2 id=\"4-55-wait-方法和notify-方法会释放线程所拥有的锁吗？\"><a href=\"#4-55-wait-方法和notify-方法会释放线程所拥有的锁吗？\" class=\"headerlink\" title=\"4.55 wait()方法和notify()方法会释放线程所拥有的锁吗？\"></a>4.55 wait()方法和notify()方法会释放线程所拥有的锁吗？</h2><p>答：是的，调用wait()方法后，线程会释放它所拥有的锁，以供其他线程竞争。</p>\n<h2 id=\"4-56-能否在非同步方法中调用wait-方法和notify-方法？\"><a href=\"#4-56-能否在非同步方法中调用wait-方法和notify-方法？\" class=\"headerlink\" title=\"4.56 能否在非同步方法中调用wait()方法和notify()方法？\"></a>4.56 能否在非同步方法中调用wait()方法和notify()方法？</h2><p>答：不可以，在非同步方法中调用这些方法会抛出IllegalMonitorStateException异常。</p>\n<h2 id=\"4-57-如何使用notify-方法和wait-方法实现线程间的协作？\"><a href=\"#4-57-如何使用notify-方法和wait-方法实现线程间的协作？\" class=\"headerlink\" title=\"4.57 如何使用notify()方法和wait()方法实现线程间的协作？\"></a>4.57 如何使用notify()方法和wait()方法实现线程间的协作？</h2><p>答：可以使用生产者-消费者模式，通过notify()方法唤醒消费者线程，然后消费者线程在消费完成后调用wait()方法等待生产者线程的唤醒。</p>\n<h2 id=\"4-58-notify-方法和notifyAll-方法有什么区别？\"><a href=\"#4-58-notify-方法和notifyAll-方法有什么区别？\" class=\"headerlink\" title=\"4.58 notify()方法和notifyAll()方法有什么区别？\"></a>4.58 notify()方法和notifyAll()方法有什么区别？</h2><p>答：notify()方法只会唤醒等待队列中的一个线程，而notifyAll()方法会唤醒等待队列中的所有线程。</p>\n<h2 id=\"4-59-在多线程环境下，如何保证两个线程交替执行？\"><a href=\"#4-59-在多线程环境下，如何保证两个线程交替执行？\" class=\"headerlink\" title=\"4.59 在多线程环境下，如何保证两个线程交替执行？\"></a>4.59 在多线程环境下，如何保证两个线程交替执行？</h2><p>答：可以使用wait()方法和notify()方法结合使用，让线程在合适的时机等待并唤醒。 </p>\n","text":"1. 面向对象1.1 什么是面向对象编程？答：面向对象编程是一种程序设计思想，通过将问题抽象成对象，通过对象之间的交互和数据封装来实现程序逻辑。 1.2 Jav...","permalink":"/post/JavaSE面试问题总结——答案版","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"八股","slug":"八股","count":2,"path":"api/tags/八股.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1. 面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">1.1 什么是面向对象编程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-Java%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">1.2 Java中的类和对象有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E4%BB%80%E4%B9%88%E6%98%AF%E5%B0%81%E8%A3%85%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%B0%81%E8%A3%85%EF%BC%9F\"><span class=\"toc-text\">1.3 什么是封装？为什么要使用封装？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-4-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%A7%E6%89%BF%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.4 什么是继承？有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-5-Java%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%BB%A7%E6%89%BF%EF%BC%9F\"><span class=\"toc-text\">1.5 Java是否支持多继承？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-6-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81%EF%BC%9F\"><span class=\"toc-text\">1.6 什么是多态？如何实现多态？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-%E4%BB%80%E4%B9%88%E6%98%AF%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.7 什么是抽象类？有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-8-%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A5%E5%8F%A3%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.8 什么是接口？有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-9-Java%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.9 Java中的构造方法有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-10-%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%EF%BC%9F\"><span class=\"toc-text\">1.10 什么是重载和重写？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-11-%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">1.11 什么是静态方法和静态变量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-12-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E9%9A%90%E8%97%8F%E5%92%8C%E5%B0%81%E8%A3%85%EF%BC%9F\"><span class=\"toc-text\">1.12 Java中如何实现数据的隐藏和封装？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-13-%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.13 什么是内部类？有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-14-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BF%E5%90%8D%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">1.14 什么是匿名类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-15-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E5%AE%9E%E7%8E%B0%EF%BC%9F\"><span class=\"toc-text\">1.15 什么是单继承和多实现？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-16-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E7%BB%A7%E6%89%BF%EF%BC%9F\"><span class=\"toc-text\">1.16 Java中如何防止继承？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-17-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%EF%BC%9F\"><span class=\"toc-text\">1.17  什么是对象的浅拷贝和深拷贝？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-18-%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%86%99equals-%E5%92%8ChashCode-%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1.18 什么是重写equals()和hashCode()方法的作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-19-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%9A%E4%B8%BE%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">1.19 什么是枚举类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-20-super%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8Cthis%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">1.20 super关键字和this关键字有何区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-21-%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">1.21 接口和抽象类的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">2. 异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%88%86%E4%B8%BA%E5%93%AA%E5%87%A0%E7%B1%BB%EF%BC%9F%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.1 Java中的异常分为哪几类？各自的特点是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.2 Java中的异常处理机制是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8Btry-catch-finally%E8%AF%AD%E5%8F%A5%E5%9D%97%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E3%80%82\"><span class=\"toc-text\">2.3 描述一下try-catch-finally语句块的执行流程。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-throw%E5%92%8Cthrows%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.4 throw和throws关键字的作用是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-RuntimeException%E5%92%8CChecked-Exception%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2.5 RuntimeException和Checked Exception有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E5%B8%B8%E9%93%BE%EF%BC%9F\"><span class=\"toc-text\">2.6 什么是异常链？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8finally%E5%9D%97%EF%BC%9F\"><span class=\"toc-text\">2.7 什么时候应该使用finally块？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%9F\"><span class=\"toc-text\">2.8 什么是异常处理的最佳实践？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-9-Error%E5%92%8CException%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2.9 Error和Exception有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-10-%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%AD%E8%A8%80%EF%BC%88assertion%EF%BC%89%E5%92%8C%E6%96%AD%E8%A8%80%E5%BC%82%E5%B8%B8%EF%BC%9F\"><span class=\"toc-text\">2.10 什么是断言（assertion）和断言异常？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-11-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E5%8E%9F%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">2.11 什么是异常处理的原则？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-12-%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8Bfinally%E5%9D%97%E4%B8%AD%E7%9A%84return%E8%AF%AD%E5%8F%A5%E4%BC%9A%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%9F\"><span class=\"toc-text\">2.12 描述一下finally块中的return语句会如何影响方法的返回值？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-13-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E5%B8%B8%E7%9A%84%E4%BC%A0%E9%80%92%EF%BC%9F\"><span class=\"toc-text\">2.13 什么是异常的传递？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-14-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E5%B8%B8%E7%9A%84%E8%BF%87%E6%BB%A4%EF%BC%9F\"><span class=\"toc-text\">2.14 什么是异常的过滤？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-15-%E5%9C%A8catch%E5%9D%97%E4%B8%AD%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%A4%9A%E4%B8%AA%E5%BC%82%E5%B8%B8%EF%BC%9F\"><span class=\"toc-text\">2.15 在catch块中如何处理多个异常？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-16-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E6%A0%88%E8%BD%A8%E8%BF%B9%EF%BC%88Stack-Trace%EF%BC%89%EF%BC%9F\"><span class=\"toc-text\">2.16 什么是堆栈轨迹（Stack Trace）？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-17-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%EF%BC%9F\"><span class=\"toc-text\">2.17 如何自定义异常？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-18-%E8%AF%B4%E4%B8%80%E4%B8%8BNullPointerException%E5%92%8CArrayIndexOutOfBoundsException%E5%BC%82%E5%B8%B8%E3%80%82\"><span class=\"toc-text\">2.18 说一下NullPointerException和ArrayIndexOutOfBoundsException异常。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-19-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E6%97%B6%E9%81%BF%E5%85%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%EF%BC%9F\"><span class=\"toc-text\">2.19 如何处理异常时避免内存泄漏？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-20-%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E5%A4%84%E7%90%86%E4%B8%8E%E9%94%99%E8%AF%AF%E7%A0%81%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">2.20 异常捕获处理与错误码处理方式有何不同？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E7%B1%BB\"><span class=\"toc-text\">3. 常用类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-String%E6%98%AF%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%EF%BC%9F\"><span class=\"toc-text\">3.1 String是可变对象还是不可变对象？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAString%E7%9A%84%E5%80%BC%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%EF%BC%9F\"><span class=\"toc-text\">3.2 如何比较两个String的值是否相等？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E5%92%8Cequals%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.3 &#x3D;&#x3D;和equals的区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-String%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.4 String类的常用方法有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-String%E5%92%8CStringBuilder-StringBuffer%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.5 String和StringBuilder&#x2F;StringBuffer的区别是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-StringBuilder%E5%92%8CStringBuffer%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.6 StringBuilder和StringBuffer有何区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D%E6%88%96%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%EF%BC%9F\"><span class=\"toc-text\">3.7 如何将一个字符串转换为大写字母或小写字母？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-8-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%BB%A5%E7%89%B9%E5%AE%9A%E7%9A%84%E5%89%8D%E7%BC%80%E6%88%96%E5%90%8E%E7%BC%80%E5%BC%80%E5%A4%B4%E6%88%96%E7%BB%93%E5%B0%BE%EF%BC%9F\"><span class=\"toc-text\">3.8 如何判断一个字符串是否以特定的前缀或后缀开头或结尾？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-9-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86%E6%88%90%E6%95%B0%E7%BB%84%E6%88%96%E5%B0%86%E6%95%B0%E7%BB%84%E6%8B%BC%E6%8E%A5%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.9 如何将字符串拆分成数组或将数组拼接成字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-10-%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%88%96%E7%89%B9%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%9F\"><span class=\"toc-text\">3.10 如何去除字符串中的空格或特定的字符？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-11-String%E5%B8%B8%E9%87%8F%E6%B1%A0%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.11 String常量池是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-12-%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAString%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%EF%BC%9F\"><span class=\"toc-text\">3.12 如何比较两个String对象的引用是否相等？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-13-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.13 如何判断一个字符串是否包含另一个字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-14-%E5%A6%82%E4%BD%95%E5%B0%86%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA%EF%BC%9F\"><span class=\"toc-text\">3.14 如何将基本类型转换为对应的字符串表示？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-15-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">3.15 如何将字符串转换为对应的基本类型？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-16-%E5%A6%82%E4%BD%95%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.16 如何反转一个字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-17-String%E7%B1%BB%E4%B8%AD%E7%9A%84-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8Cconcat-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.17 String类中的+操作符和concat()方法有何区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-18-%E5%A6%82%E4%BD%95%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%90%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.18 如何截取字符串的子串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-19-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">3.19 如何将字符串转换为字符数组？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-20-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.20 如何将字符数组转换为字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-21-String%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%98%AF%E6%94%BE%E5%9C%A8%E6%A0%88%E4%B8%8A%E8%BF%98%E6%98%AF%E5%A0%86%E4%B8%8A%EF%BC%9F\"><span class=\"toc-text\">3.21 String对象的内存分配是放在栈上还是堆上？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-22-%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%88int%EF%BC%89%EF%BC%9F\"><span class=\"toc-text\">3.22 如何将一个字符串转换为整数类型（int）？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-23-%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%88int%EF%BC%89%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.23 如何将一个整数类型（int）转换为字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-24-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E6%88%96%E8%80%85%E5%8F%AA%E5%8C%85%E5%90%AB%E7%A9%BA%E6%A0%BC%EF%BC%9F\"><span class=\"toc-text\">3.24 如何判断一个字符串是否为空或者只包含空格？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-25-%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E6%8C%89%E7%85%A7%E6%8C%87%E5%AE%9A%E7%9A%84%E5%88%86%E9%9A%94%E7%AC%A6%E6%8B%86%E5%88%86%E6%88%90%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">3.25 如何将一个字符串中的字符按照指定的分隔符拆分成数组？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-26-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E5%85%A8%E9%83%A8%E6%9B%BF%E6%8D%A2%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%EF%BC%9F\"><span class=\"toc-text\">3.26 如何将字符串中的字符全部替换为指定字符？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-27-%E5%A6%82%E4%BD%95%E5%B0%86%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E6%8F%92%E5%85%A5%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8C%87%E5%AE%9A%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%9F\"><span class=\"toc-text\">3.27 如何将指定的字符插入到字符串指定的位置？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-28-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%A4%A7%E5%86%99%E6%88%96%E5%B0%8F%E5%86%99%EF%BC%8C%E5%B9%B6%E5%BF%BD%E7%95%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%9F\"><span class=\"toc-text\">3.28 如何将字符串转换为大写或小写，并忽略字符串中的特殊字符？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-29-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BD%8D%E7%BD%AE%EF%BC%9F\"><span class=\"toc-text\">3.29 如何获取字符串中指定字符的索引位置？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-30-%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%9A%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%88%90%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.30 如何将多个字符串拼接成一个字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-31-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%EF%BC%9F\"><span class=\"toc-text\">3.31 如何判断两个字符串是否相等，忽略大小写？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-32-Java%E4%B8%AD%E7%9A%84%E5%85%AB%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.32 Java中的八种基本类型与其对应的包装类分别是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-33-%E5%A6%82%E4%BD%95%E5%B0%86%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">3.33 如何将基本类型转换为对应的包装类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-34-%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E8%A3%85%E7%B1%BB%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">3.34 如何将包装类转换为对应的基本类型？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-35-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">3.35 如何将字符串转换为对应的包装类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-36-%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E8%A3%85%E7%B1%BB%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.36 如何将包装类转换为对应的字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-37-%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%80%BC%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%EF%BC%9F\"><span class=\"toc-text\">3.37 如何比较两个包装类的值是否相等？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-38-%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\"><span class=\"toc-text\">3.38 自动拆箱和自动装箱是什么意思？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-39-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.39 包装类和基本类型存储在内存中的位置有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-40-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\"><span class=\"toc-text\">3.40 包装类的缓存是什么意思？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-41-%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%8C%85%E8%A3%85%E7%B1%BB%E6%97%B6%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8%EF%BC%9F\"><span class=\"toc-text\">3.41 在使用包装类时如何避免空指针异常？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-42-String%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8C%85%E8%A3%85%E7%B1%BB%E5%AF%B9%E8%B1%A1%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.42 String赋值给包装类对象时会发生什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-43-%E5%8C%85%E8%A3%85%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">3.43 包装类有哪些方法可以将字符串转换为对应的基本类型？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-44-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84valueOf-%E6%96%B9%E6%B3%95%E5%92%8CxxxValue-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.44 包装类的valueOf()方法和xxxValue()方法有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-45-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F%EF%BC%9F\"><span class=\"toc-text\">3.45 包装类对象如何比较大小？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-46-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%EF%BC%9F\"><span class=\"toc-text\">3.46 为什么会出现基本类型和包装类之间的装箱和拆箱？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-47-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E6%98%AF%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">3.47 如何判断一个变量的类型是否是包装类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-48-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.48 包装类的作用是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-49-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%EF%BC%9F\"><span class=\"toc-text\">3.49 在什么情况下会自动拆箱和自动装箱？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-50-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E4%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E5%BD%B1%E5%93%8D%EF%BC%9F\"><span class=\"toc-text\">3.50 包装类和基本类型之间的转换会有什么影响？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-51-Java%E4%B8%AD%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.51 Java中处理日期和时间的类有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-52-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9A%84%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%EF%BC%9F\"><span class=\"toc-text\">3.52 如何获取当前的日期和时间？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-53-%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%EF%BC%9F\"><span class=\"toc-text\">3.53 如何格式化日期和时间？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-54-%E5%A6%82%E4%BD%95%E5%9C%A8Java%E4%B8%AD%E8%A1%A8%E7%A4%BA%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E7%9A%84%E6%97%A5%E6%9C%9F%EF%BC%9F\"><span class=\"toc-text\">3.54 如何在Java中表示一个特定的日期？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-55-%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%A9%E6%95%B0%E5%B7%AE%E8%B7%9D%EF%BC%9F\"><span class=\"toc-text\">3.55 如何计算两个日期之间的天数差距？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-56-%E5%A6%82%E4%BD%95%E5%B0%86%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.56 如何将日期转换为字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-57-%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A5%E6%9C%9F%EF%BC%9F\"><span class=\"toc-text\">3.57 如何将字符串转换为日期？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-58-%E5%A6%82%E4%BD%95%E5%9C%A8Java%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%97%A5%E6%9C%9F%E7%9A%84%E5%8A%A0%E5%87%8F%E6%93%8D%E4%BD%9C%EF%BC%9F\"><span class=\"toc-text\">3.58 如何在Java中进行日期的加减操作？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-59-Java%E4%B8%AD%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%98%AF%E5%90%A6%E5%AE%89%E5%85%A8%EF%BC%9F\"><span class=\"toc-text\">3.59 Java中日期和时间的处理在多线程环境下是否安全？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-60-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%EF%BC%9F\"><span class=\"toc-text\">3.60 Java中如何比较两个日期是否相等？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-61-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9A%84%E5%B9%B4%E3%80%81%E6%9C%88%E3%80%81%E6%97%A5%E3%80%81%E6%98%9F%E6%9C%9F%E7%AD%89%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF%EF%BC%9F\"><span class=\"toc-text\">3.61 Java中如何获取某个日期的年、月、日、星期等具体信息？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-62-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9A%84%E4%B8%8B%E4%B8%80%E5%A4%A9%E6%88%96%E4%B8%8A%E4%B8%80%E5%A4%A9%EF%BC%9F\"><span class=\"toc-text\">3.62 Java中如何获取某个日期的下一天或上一天？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-63-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%9F%90%E4%B8%AA%E6%97%A5%E6%9C%9F%E6%98%AF%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%97%A5%E6%9C%9F%E4%B9%8B%E5%89%8D%E8%BF%98%E6%98%AF%E4%B9%8B%E5%90%8E%EF%BC%9F\"><span class=\"toc-text\">3.63 Java中如何判断某个日期是在另一个日期之前还是之后？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-64-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E5%B0%86%E6%97%A5%E6%9C%9F%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%9B%B6%E7%82%B9%E6%88%96%E5%8D%88%E5%A4%9C%EF%BC%9F\"><span class=\"toc-text\">3.64 Java中如何将日期设置为零点或午夜？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-65-Java%E4%B8%AD%E7%9A%84String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">3.65 Java中的String、StringBuffer和StringBuilder有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-66-String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E4%B9%8B%E9%97%B4%E7%9A%84%E6%80%A7%E8%83%BD%E5%B7%AE%E5%BC%82%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.66 String、StringBuffer和StringBuilder之间的性能差异是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-67-StringBuffer%E5%92%8CStringBuilder%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.67 StringBuffer和StringBuilder之间的区别是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-68-%E5%A6%82%E4%BD%95%E5%B0%86String%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAStringBuffer%E6%88%96StringBuilder%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">3.68 如何将String类型的字符串转换为StringBuffer或StringBuilder类型？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-69-%E5%A6%82%E4%BD%95%E5%9C%A8Java%E4%B8%AD%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F\"><span class=\"toc-text\">3.69 如何在Java中连接多个字符串？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-70-%E4%B8%BA%E4%BB%80%E4%B9%88String%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">3.70 为什么String对象是不可变的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-71-StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.71 StringBuffer和StringBuilder的常用方法有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-72-%E4%BD%95%E6%97%B6%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8StringBuffer%EF%BC%8C%E4%BD%95%E6%97%B6%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8StringBuilder%EF%BC%9F\"><span class=\"toc-text\">3.72 何时应该使用StringBuffer，何时应该使用StringBuilder？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-73-%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9E%9A%E4%B8%BE%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">3.73 如何定义一个枚举类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-74-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E5%B8%B8%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">3.74 枚举类的常量有什么特点？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-75-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E5%B8%B8%E9%87%8F%E5%8F%AF%E4%BB%A5%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.75 枚举类的常量可以有自己的属性和方法吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-76-%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">3.76 如何访问枚举类中的常量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-77-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.77 枚举类可以实现接口吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-78-%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">3.78 如何遍历枚举类中的常量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-79-%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%8E%B7%E5%8F%96%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">3.79 如何通过字符串获取枚举类中的常量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-80-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%8E%E6%99%AE%E9%80%9A%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.80 枚举类与普通类的区别是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-81-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.81 枚举类在实际开发中的应用场景有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-82-%E5%A6%82%E4%BD%95%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%9E%9A%E4%B8%BE%E5%B8%B8%E9%87%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%9F\"><span class=\"toc-text\">3.82 如何比较两个枚举常量的顺序？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-83-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E6%98%AF%E7%A7%81%E6%9C%89%E7%9A%84%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.83 枚举类的构造方法可以是私有的吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-84-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">3.84 枚举类如何定义自己的方法？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-85-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%E5%85%B6%E4%BB%96%E7%B1%BB%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.85 枚举类可以继承其他类吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-86-%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">3.86 如何在枚举类中添加更多的属性？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-87-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%9C%A8%E4%BD%95%E6%97%B6%E8%A2%AB%E8%B0%83%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">3.87 枚举类的构造方法在何时被调用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-88-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.88 枚举类可以作为方法的参数和返回值吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-89-%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%9F\"><span class=\"toc-text\">3.89 如何扩展枚举类的功能？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-90-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">3.90 枚举类可以实现单例模式吗？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">4. 多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.1 什么是线程？为什么要使用线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-Java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">4.2 Java中创建线程的方式有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%AD%EF%BC%8C%E5%93%AA%E7%A7%8D%E6%9B%B4%E5%B8%B8%E7%94%A8%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">4.3 创建线程的方式中，哪种更常用？为什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.4 如何启动一个线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-run-%E6%96%B9%E6%B3%95%E5%92%8Cstart-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.5 run()方法和start()方法有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E7%8A%B6%E6%80%81%EF%BC%9F\"><span class=\"toc-text\">4.6 线程的生命周期有哪些状态？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7-%E6%80%8E%E6%A0%B7%E5%81%9C%E6%AD%A2%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.7 怎样停止一个正在运行的线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-8-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%EF%BC%9F\"><span class=\"toc-text\">4.8 什么是线程安全？如何保证线程安全？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-9-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%9F\"><span class=\"toc-text\">4.9 什么是线程间通信？如何实现线程间通信？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-10-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.10 什么是线程死锁？如何避免线程死锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-11-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9F%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9F\"><span class=\"toc-text\">4.11 什么是线程优先级？如何设置线程优先级？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-12-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.12 什么是守护线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-13-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%EF%BC%9F%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%EF%BC%9F\"><span class=\"toc-text\">4.13 什么是线程的上下文切换？在什么情况下会发生线程的上下文切换？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-14-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F\"><span class=\"toc-text\">4.14 什么是线程池？为什么要使用线程池？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-15-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F\"><span class=\"toc-text\">4.15 Java中如何使用线程池？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-16-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">4.16 线程池有哪些常用的创建方式？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-17-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%92%8C%E6%9C%80%E5%A4%A7%E7%BA%BF%E7%A8%8B%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.17 线程池的核心线程数和最大线程数有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-18-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5%EF%BC%9F\"><span class=\"toc-text\">4.18 什么是线程池的拒绝策略？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-19-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">4.19 什么是线程局部变量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-20-%E4%BB%80%E4%B9%88%E6%98%AFThreadLocal%E7%B1%BB%EF%BC%9F%E5%A6%82%E4%BD%95%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8ThreadLocal%EF%BC%9F\"><span class=\"toc-text\">4.20 什么是ThreadLocal类？如何在多线程中使用ThreadLocal？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-21-Java%E4%B8%AD%E6%9C%89%E5%87%A0%E7%A7%8D%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%9F%E8%AF%B7%E5%88%97%E4%B8%BE%E5%B9%B6%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A%E3%80%82\"><span class=\"toc-text\">4.21 Java中有几种锁的类型？请列举并简要解释。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-22-synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8CLock%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.22 synchronized关键字和Lock接口之间有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-23-%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%82\"><span class=\"toc-text\">4.23 请解释一下volatile关键字的作用。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-24-Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9F\"><span class=\"toc-text\">4.24 Java中的线程调度算法是什么？如何改变线程的调度优先级？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-25-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%EF%BC%9FJava%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">4.25 什么是线程安全的集合？Java中有哪些线程安全的集合类？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-26-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87ClassLoader%EF%BC%9F%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">4.26 什么是线程的上下文ClassLoader？它有什么作用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-27-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E5%BC%80%E9%94%80%EF%BC%9F%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E5%BC%80%E9%94%80%EF%BC%9F\"><span class=\"toc-text\">4.27 什么是线程的上下文切换开销？如何减少上下文切换开销？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-28-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E4%B8%8D%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%88Race-Condition%EF%BC%89%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%EF%BC%9F\"><span class=\"toc-text\">4.28 什么是线程的运行状态不安全问题（Race Condition）？如何避免？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-29-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%91%E7%9C%A0%E5%92%8C%E9%98%BB%E5%A1%9E%EF%BC%9F\"><span class=\"toc-text\">4.29 什么是线程的休眠和阻塞？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-30-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%EF%BC%9FJava%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">4.30 什么是线程的调度策略？Java中的线程调度策略是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-31-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.31 什么是线程锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-32-Java%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E7%BA%BF%E7%A8%8B%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9F\"><span class=\"toc-text\">4.32 Java中有哪些线程锁机制？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-33-synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">4.33 synchronized关键字的作用是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-34-synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">4.34 synchronized关键字有哪些使用方式？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-35-%E4%BB%80%E4%B9%88%E6%98%AF%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.35 什么是悲观锁和乐观锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-36-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%88Reentrant-Lock%EF%BC%89%EF%BC%9F\"><span class=\"toc-text\">4.36 什么是可重入锁（Reentrant Lock）？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-37-%E4%BB%80%E4%B9%88%E6%98%AF%E8%AF%BB%E5%86%99%E9%94%81%EF%BC%88ReadWriteLock%EF%BC%89%EF%BC%9F\"><span class=\"toc-text\">4.37 什么是读写锁（ReadWriteLock）？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-38-%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.38 什么是公平锁和非公平锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-39-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.39 如何避免死锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-40-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%9F\"><span class=\"toc-text\">4.40 什么是线程的通信？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-41-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%9F\"><span class=\"toc-text\">4.41 Java中如何进行线程的通信？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-42-wait-%E5%92%8Csleep-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.42 wait()和sleep()方法有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-43-%E4%B8%BA%E4%BB%80%E4%B9%88wait-%E3%80%81notify-%E5%92%8CnotifyAll-%E6%96%B9%E6%B3%95%E5%BF%85%E9%A1%BB%E5%9C%A8synchronized%E5%9D%97%E5%86%85%E8%B0%83%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">4.43 为什么wait()、notify()和notifyAll()方法必须在synchronized块内调用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-44-wait-%E6%96%B9%E6%B3%95%E5%92%8Cnotify-%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F%E6%9C%89%E8%A6%81%E6%B1%82%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">4.44 wait()方法和notify()方法的调用顺序有要求吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-45-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B0%83%E7%94%A8notify-%E6%96%B9%E6%B3%95%E5%90%8E%EF%BC%8C%E4%B8%8D%E4%BC%9A%E7%AB%8B%E5%8D%B3%E9%87%8A%E6%94%BE%E9%94%81%EF%BC%9F\"><span class=\"toc-text\">4.45 为什么调用notify()方法后，不会立即释放锁？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-46-notify-%E6%96%B9%E6%B3%95%E4%BC%9A%E9%80%9A%E7%9F%A5%E5%93%AA%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.46 notify()方法会通知哪个线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-47-notifyAll-%E6%96%B9%E6%B3%95%E4%BC%9A%E9%80%9A%E7%9F%A5%E5%93%AA%E4%BA%9B%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.47 notifyAll()方法会通知哪些线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-48-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E8%B0%83%E7%94%A8wait-%E6%96%B9%E6%B3%95%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8while%E5%BE%AA%E7%8E%AF%E6%9D%A5%E6%B5%8B%E8%AF%95%E6%9D%A1%E4%BB%B6%EF%BC%9F\"><span class=\"toc-text\">4.48 为什么在调用wait()方法时，需要使用while循环来测试条件？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-49-%E5%A6%82%E4%BD%95%E5%94%A4%E9%86%92%E5%A4%84%E4%BA%8Ewait%E7%8A%B6%E6%80%81%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">4.49 如何唤醒处于wait状态的线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-50-wait-%E6%96%B9%E6%B3%95%E5%92%8Cawait-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.50 wait()方法和await()方法有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-51-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8notifyAll-%E6%96%B9%E6%B3%95%E8%80%8C%E4%B8%8D%E6%98%AFnotify-%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">4.51 为什么使用notifyAll()方法而不是notify()方法？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-52-%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6%EF%BC%9F\"><span class=\"toc-text\">4.52 如何防止线程的等待超时？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-53-%E4%B8%BA%E4%BB%80%E4%B9%88wait-%E6%96%B9%E6%B3%95%E5%92%8Cnotify-%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%9C%A8Object%E7%B1%BB%E4%B8%AD%E8%80%8C%E4%B8%8D%E6%98%AFThread%E7%B1%BB%E4%B8%AD%EF%BC%9F\"><span class=\"toc-text\">4.53 为什么wait()方法和notify()方法定义在Object类中而不是Thread类中？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-54-%E4%B8%BA%E4%BB%80%E4%B9%88wait-%E6%96%B9%E6%B3%95%E5%92%8Cnotify-%E6%96%B9%E6%B3%95%E8%A2%AB%E5%AE%9A%E4%B9%89%E4%B8%BAfinal%EF%BC%9F\"><span class=\"toc-text\">4.54 为什么wait()方法和notify()方法被定义为final？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-55-wait-%E6%96%B9%E6%B3%95%E5%92%8Cnotify-%E6%96%B9%E6%B3%95%E4%BC%9A%E9%87%8A%E6%94%BE%E7%BA%BF%E7%A8%8B%E6%89%80%E6%8B%A5%E6%9C%89%E7%9A%84%E9%94%81%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">4.55 wait()方法和notify()方法会释放线程所拥有的锁吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-56-%E8%83%BD%E5%90%A6%E5%9C%A8%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E4%B8%AD%E8%B0%83%E7%94%A8wait-%E6%96%B9%E6%B3%95%E5%92%8Cnotify-%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">4.56 能否在非同步方法中调用wait()方法和notify()方法？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-57-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8notify-%E6%96%B9%E6%B3%95%E5%92%8Cwait-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C%EF%BC%9F\"><span class=\"toc-text\">4.57 如何使用notify()方法和wait()方法实现线程间的协作？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-58-notify-%E6%96%B9%E6%B3%95%E5%92%8CnotifyAll-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">4.58 notify()方法和notifyAll()方法有什么区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-59-%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%A7%E8%A1%8C%EF%BC%9F\"><span class=\"toc-text\">4.59 在多线程环境下，如何保证两个线程交替执行？</span></a></li></ol></li></ol>","author":{"name":"Fausto Wu","slug":"blog-author","avatar":"https://himg.bdimg.com/sys/portrait/item/pp.1.6326f07e.mlPaRS5MgyJSkED3WMXgqA?_t=1710767464259","link":"/","description":"编程优雅化。<br>Elegant programming.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Redis面试问题总结——答案版","uid":"55c312fa2e77afdfd966e3f29479617e","slug":"Redis面试问题总结——答案版","date":"2024-03-18T13:00:00.000Z","updated":"2024-03-19T08:11:15.486Z","comments":true,"path":"api/articles/Redis面试问题总结——答案版.json","keywords":null,"cover":null,"text":"1. 常规问题1.1 什么是Redis，为什么用Redis？Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列...","permalink":"/post/Redis面试问题总结——答案版","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"八股","slug":"八股","count":2,"path":"api/tags/八股.json"}],"author":{"name":"Fausto Wu","slug":"blog-author","avatar":"https://himg.bdimg.com/sys/portrait/item/pp.1.6326f07e.mlPaRS5MgyJSkED3WMXgqA?_t=1710767464259","link":"/","description":"编程优雅化。<br>Elegant programming.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}